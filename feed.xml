<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>양철웅의 DX 이야기</title>
    <description>short essays on DX, cyber security, and cloud
</description>
    <link>http://cwyang.github.io/</link>
    <atom:link href="http://cwyang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 06 Jul 2022 11:36:45 +0900</pubDate>
    <lastBuildDate>Wed, 06 Jul 2022 11:36:45 +0900</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>API endpoint들의 취약한 TLS 버젼</title>
        <description>&lt;p&gt;내년 6월부터 모든 AWS API에서 TLS1.2 미만을 지원중지한다는 소식을 접하여, TLS 버젼 이야기 짧게 드립니다.
https://aws.amazon.com/ko/blogs/security/tls-1-2-required-for-aws-endpoints/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/unlocked.jpg&quot; alt=&quot;TLS 1.0, 1.1은 아주 취약해요!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TLS 1.2 미만 (SSL*, TLS1.0, TLS1.1)은 그 보안취약점으로 인해 IETF가 2021년 3월에 정식으로 관뚜껑에 못질을 하였습니다.
https://datatracker.ietf.org/doc/rfc8996/&lt;/p&gt;

&lt;p&gt;이 때 AWS는 FIPS 엔드포인트에서 TLS1.2 미만을 지원중지하였습니다.
https://aws.amazon.com/ko/blogs/security/tls-1-2-required-for-aws-fips-endpoints/&lt;/p&gt;

&lt;p&gt;그리고 내년 6월부로 모든 AWS API에서 TLS1.2 미만을 지원중지하는 것입니다.&lt;/p&gt;

&lt;p&gt;AWS에서는 서비스 마이그레이션을 위해 클라우드트레일에서 접속 TLS 버젼을 확인하고 취약한 TLS1.0, 1.1을 사용하면 해당 클라이언트를 업데이트하도록 권장하고 있습니다.&lt;/p&gt;

&lt;p&gt;브라우저벤더들이 (MS, Google, Apple, Mozilla) 2020~2021년에 걸쳐서 해당 버젼 지원을 중지하였기 때문에 TLS1.2 이상으로 통신을 강제하여도 대부분 문제가 없겠으나
레거시/커스텀 소프트웨어가 TLS통신을 할 경우 취약한 버젼으로 연결이 맺어질 수 있어 보안에 문제가 있는 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;신규 서비스 TLS 엔드포인트를 만들때에는 TLS1.2 이상으로 지정하도록 해야하고요,
기존 서비스 엔드포인트에 대해서도 취약한 TLS버젼에 어떻게 대처할 지 고민이 필요하겠지요?&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/openssl s_client -connect ncloud.apigw.ntruss.com:443 -tls1
CONNECTED(00000003)
depth=3 C = GB, ST = Greater Manchester, L = Salford, O = Comodo CA Limited, CN = AAA Certificate Services
verify error:num=19:self signed certificate in certificate chain
...
중략
...
SSL-Session:
Protocol  : TLSv1
Cipher    : ECDHE-RSA-RC4-SHA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 06 Jul 2022 08:58:00 +0900</pubDate>
        <link>http://cwyang.github.io/2022/07/06/weak_tls_on_api_endpoint.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/07/06/weak_tls_on_api_endpoint.html</guid>
        
        <category>blog</category>
        
        <category>ssl</category>
        
        <category>tls</category>
        
        
      </item>
    
      <item>
        <title>비대면 시대의 보안기술 - 보안 서비스 엣지</title>
        <description>&lt;p&gt;오늘은 비대면 시대의 보안기술로 제로트러스트와 함께 이야기 되고 있는 보안 서비스 엣지에 대해서 간단히 소개를 드려볼까 합니다. 자세한 내용은 링크해드리는 &lt;a href=&quot;https://www.itfind.or.kr/WZIN/jugidong/2051/file1834924209108887227-2051(2022.06.22)-23.pdf&quot;&gt;주간기술동향 2051호&lt;/a&gt; 안의 보안 서비스 엣지 소개글에서 읽어보실 수 있어요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/sse-unsplash.jpg&quot; alt=&quot;하이브리드 워크 시대의 정보 보안은 어떻게?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자들의 근처에 엣지를 두어 통신경로를 짧게해서 빠른 서비스를 제공하는 것이 CDN이라면, 마찬가지로 사용자들의 근처에 엣지를 두고, 모든 통신을 엣지를 거치게 하면서 엣지에서 사용자 인증 및 인가, 트래픽 검사, 악성코드 다운로드 차단, 정보 유출 방지 등 보안 기능을 수행하도록 하는 것이 SSE (Secure Service Edge)입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/sse1.png&quot; alt=&quot;SSE와 SASE의 구성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자와 모든 정보자산이 사내망에 있고, 방화벽으로 내부와 외부를 격리하는 그림이 클라우드 시대에는 맞지 않게 되었어요.&lt;/p&gt;

&lt;p&gt;보안을 하려면 검사및 조치를 하는 중앙지점이 필요한데, 사람은 안에도 있고 밖에도 있고요, 업무 자산도 사내망에도 있고 클라우드에도 있고 파편화되기 시작한거에요. 보안 입장에서 보면 혼돈의 카오스죠.&lt;/p&gt;

&lt;p&gt;사내망으로 일단 트래픽을 유도한 다음에 보안을 수행 후 외부 자산 접근시에는 다시 외부로 내보내는 그림도 충분히 생각해 볼 수 있습니다. 하지만 전송경로가 매우 길어지겠죠. 그래서 엣지에서 하면 되겠네 라고 이야기하고 있는 것이에요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/sse3.png&quot; alt=&quot;(좌): 혼돈의 카오스 (우):엣지에서 제로트러스트&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2019년 가트너에서 CDN과 같이 네트워크 성능도 빠르게 하고, 보안 기능도 수행하는 SASE (새시, Secure Access Service Edge)라는 모델을 제시하였고요, 2021년에는 네트워크랑 보안이랑 굳이 다 할 필요 있느냐, 보안만 수행하는 엣지도 충분히 가치있다 하면서 SASE에서 Access를 빼버린 SSE(Secure Service Edge) 모델을 클라우드 보안의 필수 기술로 제시했어요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/sse2.png&quot; alt=&quot;가트너 클라우드 보안 하이프 사이클&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2022년 가트너는 SSE에 대한 시장 정의, 전망 및 유력 참여자를 기술한 매직 쿼드런트 보고서를 출판하면서
여러 보안 기능을 사용해야만 하는 고객들은 여러 솔루션을 개별적으로 운영하는 것보다는 통합관리를 선호한다고 하였습니다.&lt;/p&gt;

&lt;p&gt;① ZTNA 도입에 있어서 단일 서비스보다는 SSE에 통합된 형태를 선택할 것이고 (2021년 20% → 2025년 70%). ② 2025년 80%의 기관들은 SWG, CASB, ZTNA를 별도 구매하기보 다는 통합된 SSE 서비스를 사용할 것이며 ③ SSE의 기능 중 데이터 보안의 중요도가 증가할 것이라고 하였습니다.(2021년 15%→2026년 50%)&lt;/p&gt;

&lt;p&gt;보안 서비스 엣지의 주요 기술은 누가 뭐래도 제로트러스트에요. 모든 자원에 대해서 제로트러스트 인증/인가를 집행하고, 그와 아울러 다른 보안기술도 적용하자라는 것이죠.&lt;/p&gt;

&lt;p&gt;땅덩이가 넓은 미국이나 글로벌 스케일로 업무환경을 구축하는 경우라면 보안 엣지의 구축이 필요하지만, 인터넷 인프라가 잘 되어 있는 우리나라의 경우 사용자 근처 엣지까지가 아니더라도 클라우드에서 제로트러스트 모델을 그리는 것만으로도 충분한 효과를 가져 올 수 있을 것이라고 생각합니다. &lt;a href=&quot;https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/#:~:text=Zero%20Trust&quot;&gt;작년 바이든 대통령의 행정명령에 제로트러스트라는 말이 여러번 등장&lt;/a&gt;했잖아요? 공공 클라우드를 10년 앞서간 미국은 이제 클라우드 보안이 굉장히 중요해지게 된 것이고, 그 답은 제로트러스트다라고 대통령이 답을 내놓은 것이지요. 이 흐름을 우리나라도 조금의 시차를 두고 따라갈 것이라는 것이 합리적인 추측이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;저는 요즘 제로트러스트와 보안서비스엣지 기술에 많은 관심을 가지고 있어요.
가끔씩 글을 써보겠습니다. 감사합니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2022 19:58:00 +0900</pubDate>
        <link>http://cwyang.github.io/2022/06/23/secure-service-edge.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/06/23/secure-service-edge.html</guid>
        
        <category>blog</category>
        
        <category>security</category>
        
        <category>보안</category>
        
        <category>보안서비스엣지</category>
        
        <category>SSE</category>
        
        <category>제로트러스트</category>
        
        <category>ZTNA</category>
        
        
      </item>
    
      <item>
        <title>eBPF와 libbpf</title>
        <description>&lt;h2 id=&quot;ebpf&quot;&gt;eBPF&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/eBPF.png&quot; alt=&quot;eBPF&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ebpf.io/&quot;&gt;eBPF&lt;/a&gt;는 커널의 여러 부분에서 프로그래밍을 쉽고 안전하게 할 수 있게 해 준다.&lt;/p&gt;

&lt;p&gt;BPF는 버클리 패킷 필터에서 나온 약자이지만 현재의 eBPF (extended BPF)는 패킷 필터라는 개념을 넘어섰고
커널 모드에서 코드를 안전하게 구동시키기 위한 도구로 진화했다. C와 유사한 문법으로 코드를 작성하면
안전 실행 여부를 확인한 후에 적재할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;eBPF를 꼭 커널 프로그래머들만 사용해야하는가? 꼭 그렇지많은 않다.
커널의 주요 실행 포인트들에서 eBPF를 위한 후킹 포인트를 제공하고 있기 때문에
종래의 top, iostat, vmstat, perf등보다 상세한
시스템 모니터링을 위해 사용할 수 있다. 넷플릭스 SRE팀의 브렌단 그렉이 eBPF를 이용한 여러가지 도구를 만들어 발표한 이후 &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
SRE, 데브옵스 직무로부터 많은 관심을 받고 있다.&lt;/p&gt;

&lt;h2 id=&quot;bcc&quot;&gt;BCC&lt;/h2&gt;
&lt;p&gt;eBPF 프로그래밍을 하기위해서는 &lt;a href=&quot;https://github.com/iovisor/bcc&quot;&gt;BCC (BPF Compiler Collection)&lt;/a&gt;을 사용했었다.
BCC는 eBPF 소스코드를 실행시에 native binary로 바꾸어준다.
이 때  target machine에 CLang과 커널헤더가 필요하다.
eBPF에서 커널과 인터페이스하려면 stable interface가 필요한데 커널은 항상 변하기 때문이다.
그래서 결과적으로 바이너리가 크고, 실행시 로딩타임이 있고, 타겟 머신에 커널 헤더가 있어야한다는 부담이 있다.&lt;/p&gt;

&lt;h2 id=&quot;libbpf&quot;&gt;libbpf&lt;/h2&gt;
&lt;p&gt;최근 커뮤니티에서 인기를 얻는 것이 &lt;a href=&quot;https://github.com/libbpf/libbpf&quot;&gt;libbpf&lt;/a&gt;이다. &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
실행시 &lt;a href=&quot;https://www.kernel.org/doc/html/latest/bpf/btf.html#:~:text=1.-,Introduction,info%20for%20source%2Fline%20information.&quot;&gt;BPF Type Format (BTF)&lt;/a&gt;가 필요하기 때문에, 그의 지원을 위하여  커널 컴파일시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_DEBUG_INFO_BTF=y&lt;/code&gt;
옵션을 넣어줘야한다.
libbpf는 해당 정보를 이용해서 타겟 호스트의 커널에 맞도로 컴파일된 BPF코드를 수정해서 로딩해준다.&lt;/p&gt;

&lt;p&gt;최근 커널은 자신을 설명하는 BTF를 제공한다.
아래 명령을 수행하면 모든 커널 타입을 포함하는 vmlinux.h가 생성된다.
이것과 libbpf의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_helpers.h&lt;/code&gt;만 가지면 eBPF에서 커널의 웬만한 것은 다 접근할 수 있다.
다만 &lt;a href=&quot;https://lwn.net/Articles/753601/&quot;&gt;USDT support&lt;/a&gt;등과 같이 아직 BCC가 필요한 부분도 남아있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bpftool btf dump file /sys/kernel/btf/vmlinux format c &amp;gt; vmlinux.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;libbpf-bpf프로그램의-작성순서&quot;&gt;libbpf BPF프로그램의 작성순서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;vmlinux.h 만들고&lt;/li&gt;
  &lt;li&gt;Clang 10이상의 버젼으로 BPF 프로그램을 컴파일하고&lt;/li&gt;
  &lt;li&gt;컴파일된 오브젝트 파일에서 BPF 스켈리톤을 만들고&lt;/li&gt;
  &lt;li&gt;BPF 스켈리톤헤더를 userspace 코드에 포함하여&lt;/li&gt;
  &lt;li&gt;컴파일한 BPF 오브젝트코드를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Performance-Tools-Addison-Wesley-Professional-Computing/dp/0136554822&quot;&gt;https://www.amazon.com/Performance-Tools-Addison-Wesley-Professional-Computing/dp/0136554822&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/&quot;&gt;https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://nakryiko.com/posts/bpf-portability-and-co-re/&quot;&gt;https://nakryiko.com/posts/bpf-portability-and-co-re/&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.brendangregg.com/blog/2020-11-04/bpf-co-re-btf-libbpf.html&quot;&gt;https://www.brendangregg.com/blog/2020-11-04/bpf-co-re-btf-libbpf.html&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 11 Mar 2022 09:36:43 +0900</pubDate>
        <link>http://cwyang.github.io/2022/03/11/libxdp.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/03/11/libxdp.html</guid>
        
        <category>blog</category>
        
        <category>ebpf</category>
        
        <category>sre</category>
        
        <category>xdp</category>
        
        <category>libbpf</category>
        
        
      </item>
    
      <item>
        <title>창업가의 답</title>
        <description>&lt;p&gt;좋은책 추천받아 읽었습니다.&lt;/p&gt;

&lt;p&gt;창업가의 답 - 성호철, 임경업&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/entrepreneurs.png&quot; alt=&quot;창업가의 답&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-라스트-무버가-1등이-된-당근마켓&quot;&gt;1. 라스트 무버가 1등이 된 당근마켓.&lt;/h2&gt;
&lt;p&gt;목표는 맘카페 (지역 커뮤니티 마케팅), 교차로(지역광고).&lt;/p&gt;

&lt;p&gt;2021.4 MAU 1500만. 국내 평균 침투율 60% (전체 타깃 대비 이용자수).&lt;/p&gt;

&lt;p&gt;앱은 자주 쓰지 않으면 살아남지 못한다. 이용자는 앱을 자꾸 지운다.
판교장터 앱은 2주만에 개발했다.&lt;/p&gt;

&lt;h2 id=&quot;2-철저한-상업적-접근의-웹소설-래디쉬&quot;&gt;2. 철저한 상업적 접근의 웹소설 래디쉬&lt;/h2&gt;
&lt;p&gt;사업을 하나 고르면 7년은 해야하는데 좋아하는 일을 해야한다. 비전이나 모티베이션이 없으면 버틸 수가 없다.&lt;/p&gt;

&lt;p&gt;혁신은 너 자신이 하는 것이다. 자문 쇼핑을 다니지 말라.
집단창작. A/B 테스트를 통한 구성.&lt;/p&gt;

&lt;h2 id=&quot;3-전국의-사장님들을-위한-솔루션-한국신용데이터&quot;&gt;3. 전국의 사장님들을 위한 솔루션 한국신용데이터&lt;/h2&gt;
&lt;p&gt;한국의 자영업자 절반, 생활밀접업종의 70%가 캐시노트의 가맹점.&lt;/p&gt;

&lt;p&gt;현장 영업으로는 고객확보가 불가능했던 상황 → 페이스북광고 &amp;amp; 입소문.&lt;/p&gt;

&lt;p&gt;자영업자의 pain point 카드매출정산관리에서 시작 데이터 분석을 통해 여러 pain point를 계속 해결 → 벌판에 깃발꽂음 → 그러나 아직도 “첫날”일 뿐.&lt;/p&gt;

&lt;h2 id=&quot;4-카카오에는-창업dna가-있나&quot;&gt;4. 카카오에는 창업DNA가 있나?&lt;/h2&gt;
&lt;p&gt;카카오에는 유난히 창업가가 많다.&lt;/p&gt;

&lt;h2 id=&quot;5-예측가능한-중소가구배송-오늘의-집&quot;&gt;5. 예측가능한 중소가구배송 오늘의 집&lt;/h2&gt;
&lt;p&gt;항상 10년뒤에도 변하지 않을 고객가치를 생각하라.&lt;/p&gt;

&lt;p&gt;“어떻게 오늘에 이르렀나?” — “그만두지 않았을 뿐입니다”&lt;/p&gt;

&lt;p&gt;“스타벅스커피를 한번 마셔봐야 자판기랑 차이를 알고 에어비앤비를 써봐야 좋은줄을 알게된다”&lt;/p&gt;

&lt;p&gt;“스타트업은 망할때까지 망할 것 같다”&lt;/p&gt;

&lt;p&gt;스타트업은 동료가 중요하다. — 너 내 동료가 돼라.&lt;/p&gt;

&lt;h2 id=&quot;6-직장꿀팁-고품질-유료-텍스트-퍼블리&quot;&gt;6. 직장꿀팁 고품질 유료 텍스트 퍼블리&lt;/h2&gt;

&lt;p&gt;스타트업은 가설을 실험하는 조직이다. 스타트업 비전에는 유효기간이 있다.&lt;/p&gt;

&lt;p&gt;래디쉬에이어 이재웅이 창업권유 — “완전히 속았어요”&lt;/p&gt;

&lt;p&gt;비타민에서 페인킬러로 피벗. 진통제는 안먹으면 죽는다.&lt;/p&gt;

&lt;p&gt;오늘도 우리가 만드는 서비스가 누군가의 인생을 돕고 있구나. 사업할 맛이 나죠.&lt;/p&gt;

&lt;h2 id=&quot;7-제주창업후-본토확장-캐플릭스&quot;&gt;7. 제주창업후 본토확장 캐플릭스&lt;/h2&gt;
&lt;p&gt;렌트카 시장에서 중소기업을 모아 대기업과 경쟁시킨다. 야놀자가 모텔에 하듯.&lt;/p&gt;

&lt;p&gt;공공과 연관된 아이템은 불확실성이 너무 크더라.&lt;/p&gt;

&lt;p&gt;살기위해 노동했으며, 지식기업으로 탈피후 꾸준히 노력하였다.&lt;/p&gt;

&lt;h2 id=&quot;8-김봉진은-왜-구주에-소액을-투자하는가&quot;&gt;8. 김봉진은 왜 구주에 소액을 투자하는가&lt;/h2&gt;
&lt;p&gt;시리즈D 창업가도 전세자금때문에 고생하더라. 반지하에 사는 이유가 초심을 잃기 때문이 아니라 그냥 돈이 없어서더라.&lt;/p&gt;

&lt;h2 id=&quot;9-완전한-기술중심의-문제-해결-뤼이드&quot;&gt;9. 완전한 기술중심의 문제 해결 뤼이드&lt;/h2&gt;
&lt;p&gt;맞춤형 교육 어댑티브 러닝도 진짜 AI가 아니었다.&lt;/p&gt;

&lt;p&gt;넷플릭스는 사용자의 상태가 천천히 변하나 교육은 학습에 따라 사용자의 상태가 수시로 바뀐다&lt;/p&gt;

&lt;p&gt;퍼스트 무버가 살아남으면 강력해진다. 정주영. 돌아올 다리를 불태워라.&lt;/p&gt;

&lt;h2 id=&quot;10-보이지-않는-고릴라와-독점의-법칙-런드리고&quot;&gt;10. 보이지 않는 고릴라와 독점의 법칙 런드리고&lt;/h2&gt;
&lt;p&gt;도둑도 빨래는 안훔쳐가네? 비대면 빨래서비스가 가능하겠군!&lt;/p&gt;

&lt;p&gt;세탁업의 본질? → 양방향 → 편의가 중요 → 신뢰가 더중요 → 업의 본질인 세탁을 내재화 → 원가가 문제 → 스케일과 기술로 접근 → 세탁비교로 고객에게 증명&lt;/p&gt;

&lt;h2 id=&quot;11-러닝화의-나이키와-푸드트럭의-고피자&quot;&gt;11. 러닝화의 나이키와 푸드트럭의 고피자&lt;/h2&gt;
&lt;p&gt;피자가 좋아서 피자사업을 했다&lt;/p&gt;

&lt;p&gt;가설검증을 위해 푸드트럭에서 2년간 피자를 굽다.&lt;/p&gt;

&lt;p&gt;스타트업에도 조직문화가 안맞아서 창업결정 (싱가포르에서 대학다님)&lt;/p&gt;

&lt;p&gt;custom 도우 + 화덕개발 + AI 토핑 가이드 w/ 딥러닝 → 인건비 절감 + 균일한 맛 유지&lt;/p&gt;

&lt;h2 id=&quot;12-우승-아니면-감독-교체라는-양키즈-스타일-창업-강남언니&quot;&gt;12. 우승 아니면 감독 교체라는 양키즈 스타일 창업 강남언니&lt;/h2&gt;
&lt;p&gt;배는 항구에 정박해 있을때 가장 안전하지만 그게 배의 존재 이유는 아니야.&lt;/p&gt;

&lt;p&gt;모두에게 사랑받으려다 누구에게도 사랑받지 못해. 꼭 필요한 사람에게 간절하게 잊혀지지 않는 서비스를 하자.&lt;/p&gt;

&lt;p&gt;의사였지만, 암·고혈압·당뇨·갑상선에 차례로 도전했고 차례로 실패했다.&lt;/p&gt;

&lt;p&gt;얼마나 큰 시장에 도전하는냐보다 우리가 풀수 있는 문제인가가 중요했다.&lt;/p&gt;

&lt;p&gt;영원히 성장하고 싶다. j자 커브를 위해 자율과 몰두를 소중히하다.&lt;/p&gt;

&lt;p&gt;10x 철학. 구글이 하는 일은 어떤것보다 10배 더 위대하고 나으고 빨라야한다.&lt;/p&gt;

&lt;p&gt;5등이냐? 공부시간을 늘려라. 100등이냐? 자율과 몰두하라.&lt;/p&gt;

&lt;h2 id=&quot;13-theres-no-silver-bullet-손에-피를-묻혀라-정육각&quot;&gt;13. There’s no silver bullet. 손에 피를 묻혀라 정육각&lt;/h2&gt;
&lt;p&gt;세절과 배송을 묶어 맛을 지킨다.&lt;/p&gt;

&lt;p&gt;정육업계의 Zara.&lt;/p&gt;

&lt;p&gt;네이버 스마트스토어도 농민이 쓰기는 불편해.&lt;/p&gt;

&lt;h2 id=&quot;14-주변에-한-명쯤-있는-박식한-친구-뉴닉&quot;&gt;14. 주변에 한 명쯤 있는 박식한 친구 뉴닉&lt;/h2&gt;
&lt;p&gt;요즘 세대들은 뉴스도 그냥 콘텐츠. 텍스트를 따라가기는 어렵다. 관심사도 파편화. 일회성소비.&lt;/p&gt;

&lt;p&gt;젊은 세대들에게 많이 노출이 된 이슈.&lt;/p&gt;

&lt;h2 id=&quot;에필로그&quot;&gt;에필로그.&lt;/h2&gt;
&lt;p&gt;어디서 어떻게 만나더라도 창업 멤버들은 생의 한 순간을 같이 불태웠던 동료라는 것을.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Feb 2022 01:53:00 +0900</pubDate>
        <link>http://cwyang.github.io/2022/02/15/some-enterpreneurs.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/02/15/some-enterpreneurs.html</guid>
        
        <category>blog</category>
        
        <category>book</category>
        
        <category>enterpreneurs</category>
        
        
      </item>
    
      <item>
        <title>블럭체인 지갑과 NFT</title>
        <description>&lt;h2 id=&quot;블럭체인-지갑과-nft&quot;&gt;블럭체인 지갑과 NFT&lt;/h2&gt;

&lt;p&gt;NFT나 가상화폐는 디지털 자산이며, 자산의 소유권은 블럭체인상에 저장된다. 자산의 소유자의 비밀키로 자산(의 해시값)을 서명한 내용이 저장되므로 해당 자산에 대한 소유권이 증명된다.
비밀키를 가지고 있으면 자산 양도가 가능하다. 따라서 비밀키의 보관이 매우 중요하다.&lt;/p&gt;

&lt;p&gt;블럭체인 지갑은 해당 블럭체인에서 사용되는 비밀키를 저장하는 소프트웨어이다. 대표적인 블럭체인 지갑으로서 다음과 같은 제품들이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ethereum: Metamask (https://metamask.io/), Bitski (https://wallet.bitski.com/)&lt;/li&gt;
  &lt;li&gt;Solana: Phantom (https://phantom.app/)&lt;/li&gt;
  &lt;li&gt;Klayton: Klip (https://klipwallet.com/)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nft-거래&quot;&gt;NFT 거래&lt;/h2&gt;

&lt;p&gt;NFT 거래는 이론적으로는 분산형으로 일어날 수 있지만, 대부분 편의상 거래소에서 이루어진다. NFT 자산의 탐색(explore/browse), 경매, 매매등을 제공하기 때문이다. 사용자의 트랜잭션은 블럭체인 지갑을 매개체로 이루어진다. 해당 NFT 거래소와 거래가 가능한 블럭체인 지갑을 이용해야하며, 해당 블럭체인 지갑에서 금액을 지불하고, 블럭체인 지갑으로 NFT를 받는 형식이다.&lt;/p&gt;

&lt;p&gt;OpenSea에서 제공하는 블럭체인 지갑은 아래와 같다. 이들 중 가장 널리 사용되는 메타마스크의 예를 들어 어떠한 보안 위협이 있는지 살펴보자.
&lt;img src=&quot;http://cwyang.github.io/assets/images/NFT_wallets_opensea.png&quot; alt=&quot;Opensea에서 지원하는 블럭체인 지갑들&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메타마스크-보안-이슈&quot;&gt;메타마스크 보안 이슈&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/NFT_metamask.png&quot; alt=&quot;메타마스크 지갑&quot; /&gt;
메타마스크는 크롬 브라우저 플러그인형태이며, 블록체인 트랜잭션이 필요한 비밀키(및 공개키 쌍)을 관리한다. NFT/가상화폐 서비스가 비밀키가 필요한 작업을 해야할 때 메타마스크에 작업을 요청하고, 메타마스크는 web3.js API를 이용하여 브라우저캐시에 저장된 비밀키를 접근하게 된다.&lt;/p&gt;

&lt;p&gt;브라우저캐시에는 사용자의 비밀키가 패스워드로 암호화 되어 저장되어 있다.&lt;/p&gt;

&lt;p&gt;사용자가 메타마스크를 사용함에 있어서 관리해야하는 정보는 두 가지이다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;패스워드: 브라우저 로그인 시에 사용&lt;/li&gt;
  &lt;li&gt;비밀 구문: 새로운 접근 환경 또는 패스워드 분실시 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;패스워드는 저장된 비밀키를 복호화 하기 위하여 필요하다.
비밀 구문은 날것의 비밀키를 사람이 저장하기 쉬운 형태로 코드화 한 것이다.&lt;/p&gt;

&lt;p&gt;해커가 패스워드를 입수하면, 해당 메타마스크가 구동되는 PC에 접근하여 비밀키를 알아낸 후 자산을 탈취할 수 있다.
해커가 비밀구문을 입수하면, 블럭체인은 누구에게나 오픈되어 있으므로 바로 자산을 탈취할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;그러면&quot;&gt;그러면?&lt;/h2&gt;
&lt;p&gt;안전한 NFT거래를 위해서는 무엇보다 패스워드와 비밀 구문을 관리하여 유출되지 않도록 한다.
또한 지갑의 비밀키가 저장된 영역 (브라우저캐시)을 보호해야한다. 암호화된 비밀키를 대상으로 Brute-force 공격이 가능하기 때문이다.
또한 비밀키 관리를 하드웨어 지갑이나 HW Trusted Environment에 위임하여 안전성을 높일 수 있다.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jan 2022 15:13:17 +0900</pubDate>
        <link>http://cwyang.github.io/2022/01/05/nft_metamask.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/01/05/nft_metamask.html</guid>
        
        <category>blog</category>
        
        <category>blockchain</category>
        
        <category>metamask</category>
        
        <category>nft</category>
        
        
      </item>
    
      <item>
        <title>디파이의 위험</title>
        <description>&lt;p&gt;2022년을 맞이하여 새로운 분야인 NFT/디파이/블럭체인을 공부해볼까 마음을 먹고
신년 첫날 알고랜드 디파이 서비스인 &lt;a href=&quot;https://tinyman.org&quot;&gt;tinyman.org&lt;/a&gt;의 LP풀에 $30를 예치해보았는데…&lt;/p&gt;

&lt;p&gt;그 다음날인 1월 2일 smart contract exploit 공격이 있었다.
대부분의 LP풀은 자산 가격이 다른 두 개의 토큰을 쌍으로 예치하는 방식인데,
smart contract의 헛점을 이용하여 LP풀에서 서로 다른 쌍의 토큰을 인출하는 게 아니고
같은 종류의 토큰을 인출할 수 있었다고 한다.&lt;/p&gt;

&lt;p&gt;예를 들면 100원짜리와 1원짜리를 합쳐서 101원씩 인출해야하는데
100원짜리 2개씩 인출할 수 있었던 것 같다.
&lt;img src=&quot;http://cwyang.github.io/assets/images/tinyman3.jpg&quot; alt=&quot;알립니다: 망했어요. 털렸어요.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 결과로 LP pool의 대부분이 탈취되어,
나의 자산도 &lt;strong&gt;$30&lt;/strong&gt;에서 &lt;strong&gt;$0.16&lt;/strong&gt;으로 &lt;strong&gt;1/200&lt;/strong&gt;토막이 나버렸다.
&lt;img src=&quot;http://cwyang.github.io/assets/images/tinyman1.jpg&quot; alt=&quot;$60이 되라고 $30을 넣었는데 (나 부자되나..)&quot; /&gt;
&lt;img src=&quot;http://cwyang.github.io/assets/images/tinyman2.jpg&quot; alt=&quot;$0.16이 되어 1/200토막이 나버렸다. (이게뭐야!!!)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;블럭체인/NFT는 자산이 움직이는 세계이고, 이 세계에서는 사이버 보안이 매우 중요하다.. 
는 것을 온 몸 바쳐서 경험한 새해 벽두.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jan 2022 15:45:00 +0900</pubDate>
        <link>http://cwyang.github.io/2022/01/03/tinyman-gets-attack.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/01/03/tinyman-gets-attack.html</guid>
        
        <category>blog</category>
        
        <category>defi</category>
        
        <category>algorand</category>
        
        <category>tinyman</category>
        
        <category>exploit</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>이번 Log4J 자바취약점 요약</title>
        <description>&lt;p&gt;이번 자바취약점 CVE-2021-44228에 대해 짧게 씁니다.&lt;/p&gt;

&lt;p&gt;무엇인가?&lt;br /&gt;
➡️자바관련 무엇인가 패키지에 구멍이 있어서 해커가 원격커맨드를 실행시킬 수가 있다. 랜섬웨어라던가 랜섬웨어라던가..&lt;/p&gt;

&lt;p&gt;좀더 자세히.&lt;br /&gt;
➡️취약한 부분이 관리를 위한 로깅 모듈이다. 해커가 브라우저에 특정 메세지를 집어넣고, 그것이 서버에서 로깅(기록)이 되는 순간 원격 커맨드가 실행된다.&lt;/p&gt;

&lt;p&gt;어떻게 막나?&lt;br /&gt;
➡️취약한 부분을 패치하면 원격 커맨드가 실행안된다. 또는 방화벽(웹방화벽)단에서 원격 커맨드를 실행하도록 하는 패턴을 막는다.&lt;/p&gt;

&lt;p&gt;심각한가?&lt;br /&gt;
➡️그렇다. 인터넷의 많은 부분이 자바로 이루어져있기 때문이다. 그리고 재현방법이 너무 쉽다. imperva의 아래 그림 참조. 13시간만에 100만건 이상의 공격이 있다고..&lt;/p&gt;

&lt;p&gt;패치하면 된다며?&lt;br /&gt;
➡️모든 서버 관리팀들이 FAANG네카라쿠배는 아니잖아요. 관리 안되는 서버들 많이 있는거 아시면서..&lt;/p&gt;

&lt;p&gt;급 회사광고&lt;br /&gt;
➡️수산아이앤티 웹방화벽 &lt;a href=&quot;https://www.soosanint.com/contents.php?con_id=solution4&quot;&gt;https://www.soosanint.com/contents.php?con_id=solution4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/log4j_imperva.jpg&quot; alt=&quot;재현이 쉬워 전파가 빠르다. (source: imperva)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Dec 2021 12:08:00 +0900</pubDate>
        <link>http://cwyang.github.io/2021/12/14/cve-2021-44228.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2021/12/14/cve-2021-44228.html</guid>
        
        <category>blog</category>
        
        <category>vulnerability</category>
        
        <category>log4j</category>
        
        <category>java</category>
        
        <category>jndi</category>
        
        
      </item>
    
      <item>
        <title>인간이 중요해진 시대 - CES 2021</title>
        <description>&lt;p&gt;오늘 CES2021에 대한 강연을 듣고 생각을 정리하여 봅니다. 기업의 눈이 아닌 사람의 눈으로 우리 시대의 변화를 바라보라는 메세지를 받은 강연이었습니다. 좋은 강연을 마련해주신 회사와 발표해주신 이용덕교수님께 감사드립니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CES 2020의 주제가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기술의 급변 + AI war + 비즈니스 영역붕괴 + 미래 경험의 가치&lt;/code&gt;였다면,
CES 2021의 주제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;언택트 + 홈코노미 + ESG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;이는 100% COVID-19가 가지고 온 라이프스타일의 파괴적 변화때문.&lt;/p&gt;

&lt;p&gt;뉴노멀의 등장. 베터 노멀 Better Normal (LG의 캐치프레이즈)의 추구. 일(Work)이 바뀌고 (onoff mix), 교육이 바뀐다. (정신적 치유/학습의 질)&lt;/p&gt;

&lt;p&gt;2021년. 무엇보다 인간의 생활이 중요해진 시대.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/life-is-on-lg-ces2021.png&quot; alt=&quot;당연했던 것들이 추억이 되어버린 시대&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 “디지털 대항해시대” → 데이터를 바탕으로 클라우드에서 새로운 비즈니스 영역을 찾아라.&lt;/p&gt;

&lt;p&gt;언택트로 인해 “체험”이 없는 세계.
그 결과로
“스토리 텔링”이 중요해진다.
스토리가 체험을 대신할 수는 없지만, 스토리가 있으면 관심과 신뢰를 전달할 수 있기 때문.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trend: 이커머스, 원격진료, 스트리밍 비디오, 원격 교육&lt;/li&gt;
  &lt;li&gt;Tool: AI, RPA, NLP, 클라우드&lt;/li&gt;
  &lt;li&gt;테크놀러지의 구분이 없이 모든것이 변화하는 디지털 트랜스포메이션에서 토털 트랜스포메이션의 시대.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사람 관점에서의 몇가지 기술들&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LIFE = CONNECT + CARE + COMFORT&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bQd2J-53PTU&quot;&gt;삼성의 “Better Normal for All”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Y-7coIGK7IM&quot;&gt;LG의 “Life is ON”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=z4rSG8f8N00&quot;&gt;AI-pet: MOFLIN. AI Model학습→Cloud→배포&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=m9AL266C0lc&quot;&gt;삼성 휴대폰 업사이클링 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bNSCIuHKhro&quot;&gt;Shower Power: 수력발전 스피커 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OWVy_bq8VFI&quot;&gt;AI 스킨케어: 아모레 립스틱 색 추천, 맞춤형 토너 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Yj0R1RgyIx4&quot;&gt;LG의 버추얼 아바타 레아 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;필립스 바이오스티커&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p.s. 행사자체 면에서는 줄어든 관객(적은 관심), 교류 부족, 체험 불가, 확인 불가, 지루한 진행.
내년의 CES는 이 위기를 극복할 수 있을 것인지?&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Feb 2021 00:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2021/02/04/ces-2021.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2021/02/04/ces-2021.html</guid>
        
        <category>blog</category>
        
        <category>ces</category>
        
        <category>digital transformation</category>
        
        
      </item>
    
      <item>
        <title>도커허브 이미지 풀 제약을 하버로 해결하기</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이미지 다운이 막혔어요. 도커허브 미워요.&lt;/li&gt;
  &lt;li&gt;하버 짱이에요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커허브에서-무턱대고-이미지를-당기다보면-에러가-난다&quot;&gt;도커허브에서 무턱대고 이미지를 당기다보면 에러가 난다.&lt;/h2&gt;

&lt;p&gt;도커허브에서 무료사용자들에 대해 pul rate limit를 부과하기 시작했다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ip별 6시간에 100번&lt;/li&gt;
  &lt;li&gt;무료사용자 id하나에 대해 6시간에 200번&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;연구소 기계들이 NAT아래에 있다보니 이미지 몇개 당겨오다보면 금방 한계에 부딪히게 되고 만다. 쿠버네티스 파드가 뜨지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME             READY   STATUS             RESTARTS   AGE
pod/test         2/3     ImagePullBackOff   0          11m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그를 보면 아래와 같이 도커허브에서 알려주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Too Many Requests&lt;/code&gt; 메세지가 보인다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Normal   Pulling    7m4s (x3 over 8m22s)    kubelet   Pulling image &quot;alpine:latest&quot;
Warning  Failed     6m50s (x2 over 8m8s)    kubelet   Failed to pull image &quot;alpine:latest&quot;: rpc error: code = Unknown desc = failed to pull and unpack image &quot;docker.io/library/alpine:latest&quot;: failed to copy: httpReaderSeeker: failed open: unexpected status code https://registry-1.docker.io/v2/library/alpine/manifests/sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378: 
  429 Too Many Requests - Server message: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit
Warning  Failed     6m50s (x3 over 8m8s)    kubelet   Error: ErrImagePull
Warning  Failed     3m23s (x12 over 7m18s)  kubelet   Error: ImagePullBackOff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 상황을 타개하기 위해 이미지 레지스트리 서버인 &lt;a href=&quot;https://goharbor.io/&quot;&gt;Harbor&lt;/a&gt;를 설치하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goharbor/harbor/releases&quot;&gt;다운로드 페이지&lt;/a&gt;에서 인스톨러를 다운받은 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;harbor.yml.tmpl&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;harbor.yml&lt;/code&gt;로 바꾼후 안의 내용을 보고 수정한다. TCP port와 SSL인증서 값을 설정한 후 설치하면 바로 구동된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
[cwyang@jupiter harbor]$ sudo ./install.sh
[Step 0]: checking if docker is installed ...
Note: docker version: 19.03.6
...
Creating redis ...
Creating harbor-core ...
Creating nginx ...
Creating harbor-jobservice ...
✔ ----Harbor has been installed and started successfully.----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;웹브라우저로 접속하고, admin password를 바꾼 후, proxy cache를 설정해보자.
하버 프락시 캐시를 설정하고 사용자가 프락시 캐시를 요청하면 하버는 이미지를 origin에서 받아서 제공하는 한편 그를 저장해 두고 다음부터는 저장된 이미지를 제공한다. 이미지 요청이 오면 origin 서버로 확인을 하게 되는데 다음과 같이 4가지 경우를 구분하여 처리한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이미지가 안바뀜 → 저장된 이미지 제공&lt;/li&gt;
  &lt;li&gt;이미지가 바뀜 → 새 이미지를 다운받아 제공&lt;/li&gt;
  &lt;li&gt;origin에 연결안됨 → 저장된 이미지 제공&lt;/li&gt;
  &lt;li&gt;이미지가 삭제됨 → 이미지 제공하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하버가 매 요청마다 origin에 확인을 할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 요청을 이용하는데,
도커허브 ratelimiter가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;는 (현재까지는) 무제한 허용을 해 주기 때문에 안심하고 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;하버-설정하기&quot;&gt;하버 설정하기&lt;/h2&gt;

&lt;p&gt;레지스트리 메뉴에서 새 엔드포인트를 생성한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor01.png&quot; alt=&quot;엔드포인트 생성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음에는 프로젝트 메뉴에서 프락시 캐시 타입의 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor02.png&quot; alt=&quot;프락시 캐시 프로직트  생성&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;설정된-주소로-컨테이너-이미지-가져오기&quot;&gt;설정된 주소로 컨테이너 이미지 가져오기&lt;/h2&gt;
&lt;p&gt;이제 됐다. 사용하기 위해서는 이미지 URL 앞에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;harbor_server_name&amp;gt;/&amp;lt;proxy_project_name&amp;gt;/&lt;/code&gt;을 붙여주어야한다. 그리고 toplevel 이미지를 당기려면 앞에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;library&lt;/code&gt; path를 붙여준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;​​# pull alpine:latest
​​cwyang@cwyang ~ $ docker pull jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​latest: Pulling from proxy/library/alpine
​​596ba82af5aa: Pull complete
​​Digest: sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378
​​Status: Downloaded newer image for jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​
​​#pull networkservicemesh/test-common:v0.2.0
​​cwyang@cwyang ~ $ docker pull jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​v0.2.0: Pulling from proxy/networkservicemesh/test-common
​​89d9c30c1d48: Pull complete
​​139dffae8422: Pull complete
​​Digest: sha256:6ba5743738a0244d9c7f69ff2f2ac1fbd7598eb8ff2f9b40ddba8c533d918b21
​​Status: Downloaded newer image for jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​cwyang@cwyang ~ $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 콘솔을 확인하면 아래와 같이 캐시된 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor03.png&quot; alt=&quot;저장된 컨테이너 이미지들&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 캐시된 이미지는 7일간 유효하다. 설치시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--with-trivy&lt;/code&gt; 옵션을 주면 저장 이미지에 대해서 취약점 스캐닝을 하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trivy&lt;/code&gt;가 같이 설치된다.&lt;/p&gt;

&lt;p&gt;이제 파드 매니페스트 파일에서 이미지 레지스트리주소를 하버 주소로 바꾸고 사용하도록 하자.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 15:02:41 +0900</pubDate>
        <link>http://cwyang.github.io/2021/01/20/using-harbor-to-avoid-dockerhub-pull-ratelimit.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2021/01/20/using-harbor-to-avoid-dockerhub-pull-ratelimit.html</guid>
        
        <category>blog</category>
        
        <category>docker</category>
        
        <category>dockerhub</category>
        
        <category>harbor</category>
        
        <category>container</category>
        
        <category>k8s</category>
        
        <category>kubernetes</category>
        
        
      </item>
    
      <item>
        <title>맥OS 앱 코드사인 및 공증하기</title>
        <description>&lt;p&gt;윈도우즈와 마찬가지로 맥 생태계에서도 인터넷으로 다운 받는 앱에 대해서는 보안검증이 이루어진다.
앱을 누가 만들었는지를 알 수 없거나 악성 코드 체크가 이루어지지 않는 경우 아래 그림과 같이
사용자에게 물어보거나, 설정에 따라서 실행을 아예 막아버리기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/osx_gatekeeper_bad.png&quot; alt=&quot;앱이 의심스러워 실행을 금지합니다!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 앱의 배포를 위해서는 코드사인과 공증 작업이 필요하다. 
Xcode앱인 경우 Xcode에서 대부분 알아서 해 줄 것인데, 수작업으로 작업을 진행해야 할 때도 있다.
당신(이라고 쓰고 미래의 나 라고 읽자)은 수작업으로 진행해야 하기 때문에 이 글을
읽고 있으리라.
자세한 내용은 아래 관련정보에서 얻을 수 있지만, 미래의 나에게 요약하는 의미로
중요한 것을 별도로 정리한다.
&lt;a href=&quot;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&quot;&gt;관련정보&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;코드사인-code-sign&quot;&gt;코드사인 (Code-sign)&lt;/h1&gt;

&lt;p&gt;앱에 제작자를 새겨 넣는 작업이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;맥 개발자 프로그램이 필요하다. 가입한다. (유료. 연간 $99)&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/ 에 방문하여 Developer-ID 인증서를 만든다.
만든 인증서는 다운받아 컴의 Keychain access에 저장한다.
Keychain access에서 해당 인증서의 Private-key를 찾을 수 없다면 뭔가 잘못된 것.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드사인을 한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codesign --options=runtime -s 'Developer ID Application' MyApp.app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드사인이 잘 안된다면 앱의 모든 화일을 대상으로 extended attribute를 지우고 다시 시도한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find MyApp.app | xargs xattr -xc&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;공증-notarization&quot;&gt;공증 (Notarization)&lt;/h1&gt;

&lt;p&gt;코드사인된 앱을 애플에 보내서 기본적인 검사를 진행하고 OK도장을 받는 작업이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Xcode command toolset을 설치한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcrun altool&lt;/code&gt; 명령어가 성공해야한다.&lt;/li&gt;
  &lt;li&gt;다음 명령어를 이용하여 공증을 시도한다. 잘 되었으면 UUID가 반환된다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% xcrun altool --notarize-app
            --primary-bundle-id &quot;com.example.ote.zip&quot;
            --username &quot;AC_USERNAME&quot;
            --password &quot;@keychain:AC_PASSWORD&quot;
            --asc-provider &amp;lt;ProviderShortname&amp;gt;
            --file OvernightTextEditor_11.6.8.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;username: 개발자 ID&lt;/li&gt;
      &lt;li&gt;password: 개발자 ID 비밀번호가 &lt;strong&gt;아니고&lt;/strong&gt; 앱개발 전용 비밀번호이다. &lt;a href=&quot;https://appleid.apple.com&quot;&gt;애플아이디 설정페이지&lt;/a&gt; 에서 지정하는 앱개발용 암호이다.&lt;/li&gt;
      &lt;li&gt;asc-provider: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcrun altool --list-providers -u &quot;AC_USERNAME&quot; -p &quot;@keychain:AC_PASSWORD&quot;&lt;/code&gt;을 이용하여 얻어낸 provider id를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공증 상태를 체크하기 위해서는 아래 명령어를 사용한다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% xcrun altool --notarization-history 0 -u &quot;AC_USERNAME&quot; \
 -p &quot;@keychain:AC_PASSWORD&quot;
% xcrun altool --notarization-info \
 2EFE2717-52EF-43A5-96DC-0797E4CA1041 -u &quot;AC_USERNAME&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;공증이 잘 끝났으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcrun stapler staple &quot;Overnight TextEditor.app&quot;&lt;/code&gt; 명령어를 이용하여 공증 결과를 화일에 첨부한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 해당 파일을 웹 서버에 올리고 다운을 받아보자. 다음과 같이 실행할 것인지 물어본다면 성공!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/osx_gatekeeper_ok.png&quot; alt=&quot;인터넷에서 받은 앱을 실행하시겠어요?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하얗게 불타버린 오늘 하루였다. 커피한잔 사주실분!!!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;cwyang&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000000&quot; data-font-color=&quot;#000000&quot; data-coffee-color=&quot;#ffffff&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2020 18:12:00 +0900</pubDate>
        <link>http://cwyang.github.io/2020/12/09/osx-codesign-notarization.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2020/12/09/osx-codesign-notarization.html</guid>
        
        <category>blog</category>
        
        <category>macos</category>
        
        <category>osx</category>
        
        <category>code-sign</category>
        
        <category>notarization</category>
        
        
      </item>
    
  </channel>
</rss>
