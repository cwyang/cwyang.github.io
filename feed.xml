<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cwyang's blog</title>
    <description>short essays
</description>
    <link>http://cwyang.github.io/</link>
    <atom:link href="http://cwyang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Oct 2018 18:46:03 +0900</pubDate>
    <lastBuildDate>Fri, 12 Oct 2018 18:46:03 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>OVS, Docker, CentOS7 환경 만들기</title>
        <description>&lt;h1 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h1&gt;

&lt;p&gt;centos7기반의 ovs와 docker가 머신이 당분간 계속 필요할 것 같아서,  vagrant를 이용하여 VM을  빌드해보기로 하였습니다.
vagrant는 가상 머신 설치를 도와주는 프로그램입니다. vagrant가 없었던 시절에는 VM에 직접 인스톨 한 후 VM 이미지를 복사해 두어 재 사용하는 방법을 사용했었습니다.
vagrant에서는 기본 이미지 (box라고 합니다.)를 제공하면서, 그 위에 설치 프로그램 형상을 사용자가 지정할 수 있도록 합니다. 쓰면 매우 편한겁니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
Linux cwyang 4.10.0-42-generic &lt;span class=&quot;c&quot;&gt;#46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install virtualbox vagrant&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;ssl-접속환경-확인&quot;&gt;SSL 접속환경 확인&lt;/h1&gt;

&lt;p&gt;다음 ssl domain들이 인증서 피닝을 요구합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vagrantcloud.com&lt;/li&gt;
  &lt;li&gt;cbs.centos.org&lt;/li&gt;
  &lt;li&gt;yum.dockerproject.org&lt;/li&gt;
  &lt;li&gt;raw.githubusercontent.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;회사안에서 SSL 복호화 장비가 있는 경우 회사 인증서를 VM에 신뢰할 수 있는 인증서로 심거나, SSL 복호화 장비에서 위의 사이트들에 대하여 복호화를 바이패스 하도록 설정합니다.&lt;/p&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;

&lt;p&gt;github에 설치 스크립트를 작업해 둔 분이 있습니다. (&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/tree/master/ovs-vagrant&quot;&gt;링크&lt;/a&gt;)그 파일들을 이용해서 설치해 보았습니다. 감사합니다.&lt;/p&gt;

&lt;p&gt;아래 두 파일을 저장한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;  명령어를 실행하면 수 분 안에 centos/7을 다운 받고 dependency package를 설치하고 ovs를 설치하고 docker를 설치해줍니다. 좋은 세상입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/blob/master/ovs-vagrant/Vagrantfile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/blob/master/ovs-vagrant/bootstrap.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;설치-확인&quot;&gt;설치 확인&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant ssh
Last login: Fri Oct 12 01:13:18 2018 from 10.0.2.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;호스트의 id_rsa.pub를 VM의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh/authorized_keys&lt;/code&gt;에 등록하면 직접 ssh도 가능합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh vagrant@127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2222
Last login: Fri Oct 12 01:22:25 2018 from 10.0.2.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;도커와 OvS를 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status openvswitch docker
● openvswitch.service - Open vSwitch
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/lib/systemd/system/openvswitch.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exited&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2018-10-12 01:05:18 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 21min ago
 Main PID: 25616 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited, &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0/SUCCESS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 0
   Memory: 0B
   CGroup: /system.slice/openvswitch.service

● docker.service - Docker Application Container Engine
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/lib/systemd/system/docker.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2018-10-12 01:05:37 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 21min ago
     Docs: https://docs.docker.com
 Main PID: 25686 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dockerd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 16
   Memory: 16.0M
   CGroup: /system.slice/docker.service
           ├─25686 /usr/bin/dockerd
           └─25689 docker-containerd &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; unix:///var/run/docker/libcontainerd/docker-containerd.sock &lt;span class=&quot;nt&quot;&gt;--metrics-interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 -...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;도커 실행을 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;그룹에 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt; 사용자를 등록합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker vagrant&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;two-containers-w-ovs-bridge&quot;&gt;Two containers w/ OVS bridge&lt;/h1&gt;
&lt;h2 id=&quot;구성&quot;&gt;구성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;moby1: eth1 192.168.0.1/24
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby2: eth1 192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ovs-브릿지-생성&quot;&gt;OVS 브릿지 생성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;root@localhost vagrant]# ovs-vsctl add-br ovs-br1
root@localhost vagrant]# ovs-vsctl show
94185d0-937e-49bf-a0a4-69ca5027718b
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;2.9.0&quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너-생성후-ovs-bridge에-연결&quot;&gt;컨테이너 생성후 ovs-bridge에 연결&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby1 ubuntu
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 apt-get update
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 apt-get install iproute2 iputils-ping
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1/24

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby2 ubuntu
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get update
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get install iproute2 iputils-ping
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth2 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2/24

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 ip address
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
...
21: eth0@if22: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default
...
23: eth1@if24: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether b2:bf:61:25:7e:f8 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 192.168.0.1/24 scope global eth1
       valid_lft forever preferred_lft forever&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너간-연결-확인&quot;&gt;컨테이너간 연결 확인&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl list-ports ovs-br1
6b9045d2be344_l
90cd4018819e4_l
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 ping 192.168.0.2 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.2: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.037 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.2 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.037/0.037/0.037/0.000 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 ping 192.168.0.1 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.1: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.037 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.1 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.037/0.037/0.037/0.000 ms&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;v&lt;/p&gt;
&lt;h1 id=&quot;three-containers-w-ovs-bridge&quot;&gt;Three-containers w/ OVS bridge&lt;/h1&gt;
&lt;h2 id=&quot;구성-1&quot;&gt;구성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;moby1: eth1 192.168.0.1/24
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby2: eth1 - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;moby2-bridge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - eth2
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby3: eth1 192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ovs-브릿지-생성-1&quot;&gt;OVS 브릿지 생성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br1
vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br2
vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl show
94185d0-937e-49bf-a0a4-69ca5027718b
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;2.9.0&quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너-생성후-ovs-bridge에-연결-1&quot;&gt;컨테이너 생성후 ovs-bridge에 연결&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;run.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl show

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby1 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1/24

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby2 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br2 eth2 moby2

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby3 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby3 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby3 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br2 eth1 moby3 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;host-bridge&quot;&gt;host-bridge&lt;/h2&gt;

&lt;p&gt;moby2안에서 bridge를 생성하여야 하는데, 기본적으로 NET-ADMIN capability를 가지고 있지 못하므로 아래와 같이 실패할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;root@79c82193d876:/# ip link add name moby2-bridge &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
RTNETLINK answers: Operation not permitted&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그래서 위에서 moby2는 &lt;code class=&quot;highlighter-rouge&quot;&gt;--privileged&lt;/code&gt; 옵션을 이용하여 구동하였습니다. 자 브릿지를 만들어 봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link add name moby2-bridge &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev moby2-bridge up
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 master moby2-bridge
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth2 master moby2-bridge

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: moby2-bridge: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
    link/ether 1e:d3:03:6a:8d:53 brd ff:ff:ff:ff:ff:ff
55: eth0@if56: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0
57: eth1@if58: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master moby2-bridge state UP mode DEFAULT group default qlen 1000
    link/ether 1e:d3:03:6a:8d:53 brd ff:ff:ff:ff:ff:ff link-netnsid 0
59: eth2@if60: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master moby2-bridge state UP mode DEFAULT group default qlen 1000
    link/ether 7e:a1:31:29:09:fc brd ff:ff:ff:ff:ff:ff link-netnsid 0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너간-연결-확인-1&quot;&gt;컨테이너간 연결 확인&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get install tcpdump

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 ping 192.168.0.2 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.2: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.339 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.2 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.339/0.339/0.339/0.000 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 때 moby2에서 moby2-bridge에 대고 패킷을 뜨면 위의 연결 확인 패킷을 잡을 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; moby2-bridge &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
tcpdump: verbose output suppressed, use &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on moby2-bridge, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 262144 bytes
05:24:36.195869 IP 192.168.0.1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.0.2: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, id 344, seq 1, length 64
E..T..@.@..............L.X...0.[....G....................... &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$%&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;'()*+,-./01234567
05:24:36.195971 IP 192.168.0.2 &amp;gt; 192.168.0.1: ICMP echo reply, id 344, seq 1, length 64
E..T....@.x...........!L.X...0.[....G....................... !&quot;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$%&amp;amp;'()*+,-./01234567&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 12 Oct 2018 14:38:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/10/12/ovs-docker-centos7-environment.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/10/12/ovs-docker-centos7-environment.html</guid>
        
        <category>blog</category>
        
        <category>ovs</category>
        
        <category>docker</category>
        
        <category>centos</category>
        
        <category>vagrant</category>
        
        
      </item>
    
      <item>
        <title>Encrypted SNI</title>
        <description>&lt;p&gt;얼마전에 H2O개발자인 Kazuho Oku씨가 IETF hackerthon에서 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-esni-01&quot;&gt;암호화 SNI&lt;/a&gt; 구현을 했다는 소식을 들었습니다. 그리고 오늘 Cloudflare에서 모든 서비스에 full support를 한다고 &lt;a href=&quot;https://blog.cloudflare.com/encrypted-sni/&quot;&gt;발표를 했네요.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/esni_cloudflare.png&quot; alt=&quot;ESNI&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이제 SNI 차단은 안된다는 것이에요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정확히 말하면 SNI 차단을 막아주는 환경을 제공하는 사업자가 생겼다라는 것입니다.&lt;/p&gt;

&lt;p&gt;DNS over TLS와 함께 SSL/TLS통신을 쓰면 대부분이 암호화 통신이 되고 있었지만, 유일하게 암호화 되지 않았던 부분이 요청시의 SNI필드 &lt;code class=&quot;highlighter-rouge&quot;&gt;나 www.naver.com에 방문하고 싶어요&lt;/code&gt;와 함께 응답시의 인증서필드 &lt;code class=&quot;highlighter-rouge&quot;&gt;알았어요. 우선 www.naver.com인증서를 보낼테니 확인해보세요&lt;/code&gt;  였습니다.&lt;/p&gt;

&lt;p&gt;TLS 1.3부터는 인증서도 암호화해서 보냅니다. 그래서 진짜 남은게 요청시의  SNI 필드였는데, 그것도 저 인터넷 드래프트의 구현으로 해결한거죠. 저 인터넷 드래프트는 RFC로 등록이 될 것이라고 생각해요.&lt;/p&gt;

&lt;p&gt;DNS로 퍼블릭 키를 배포하고, 퍼블릭 키를 이용하여 DH (Diffie-Hellman)로 공유키를 만듭니다. DH를 이용하기 때문에 매 세션마다 공유키가 바뀌니까 암호화된 공유키로 원본을 특정할 수가 없구요, 퍼블릭 키를 주기적으로 바꾸게 되면 암호화 메카니즘이 완전히 안전해지는거에요.&lt;/p&gt;

&lt;p&gt;기술은 점점 더 익명화를 지향하는 쪽으로 나아가고 있는 것이 맞는데, 그게 좋은 건지 생각해보게 됩니다.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;SecureDNS, DNSSec, TLS1.3, Encrypted SNI 환경을 테스트하는 페이지를 &lt;a href=&quot;https://www.cloudflare.com/ssl/encrypted-sni/&quot;&gt;cloudflare에서 서비스하고 있습니다.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Sep 2018 09:40:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/09/24/cloudflare-does-esni.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/09/24/cloudflare-does-esni.html</guid>
        
        <category>blog</category>
        
        <category>sni</category>
        
        <category>tls</category>
        
        <category>ssl</category>
        
        <category>filtering</category>
        
        
      </item>
    
      <item>
        <title>디퍼런트 - Escaping the Competitive Herd</title>
        <description>&lt;p&gt;지난 주말에 책 한권을 읽었습니다. 경영 서적인 &lt;디퍼런트&gt; 입니다.&lt;/디퍼런트&gt;&lt;/p&gt;

&lt;p&gt;성숙된 시장에서는 소비자는 회사가 아닌 카테고리만을 기억한다는 점이 인상적이었기에 짧게 책을 소개해드릴께요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/different-cover.jpg&quot; alt=&quot;Different - by Y.M.Moon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;국문판 부제는 “넘버원을 넘어 온리원으로”이고, 영문판 부제는 “Escaping the Competitive Herd”인데, 영문판 부제가 주제를 더 정확히 설명하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;becoming-herd&quot;&gt;Becoming Herd&lt;/h2&gt;

&lt;p&gt;경쟁에 참여하게 되면 자신의 위치를 분석하여 약점을 보완하는 것이 인간의 본능이며, 이것은 기업도 마찬가지입니다. 포지셔닝 맵 분석, 시장조사등의 과정을 거쳐 모두는 비슷비슷해지게 되며 소비자는 특정 회사를 기억하기 보다는 카테고리를 기억하게 됩니다.&lt;/p&gt;

&lt;p&gt;참여자가 모두 비슷비슷해지게 되는 과잉 성숙 단계의 카테고리에서 활동하는 기업들은 제자리를 지키기 위해 엄청난 에너지를 소비하게 되는데, 기업들은 그것이 치열한 경쟁 상황에서 피할 수 없는 운명이라고 결론짓기도 합니다. 그러나 모두가 발전을 위해 달려가지만 마지막에 도달하는 곳은 공동의 파멸뿐이라는 진화의 역설이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/different-becoming-herd.jpg&quot; alt=&quot;Becoming Herd&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;escaping-herd&quot;&gt;Escaping Herd&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;다른&lt;/strong&gt; 아이디어가 &lt;strong&gt;다른&lt;/strong&gt; 세상을 지배하게 됩니다.&lt;/p&gt;

&lt;p&gt;무한 경쟁 카테고리에서 바둥거리기 보다는 살아남기 위한 세가지 접근 방법을 제안하였습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reversal 역발상&lt;br /&gt;
Feature를 단순화. Less is More&lt;/li&gt;
  &lt;li&gt;Breakaway/일탈화&lt;br /&gt;
고정관념 타파. Break the Frame&lt;/li&gt;
  &lt;li&gt;Hostility/적대발상&lt;br /&gt;
싫으면 말고. Hate it or Love it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Break the Frame은 올 시즌 한화 이글스의 캐치입니다. 이번 시즌 한화 이글스를 살리고 있는것이 이 캐치 때문일까요?&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;p&gt;p.s. 전반적으로 번역은 매끄러운 편입니다만  9장에서 머니볼 이야기를 하면서 (전문)통계만 의지하면 시장조사 자료(스카우트들의 정보)를 무시하게 되므로 그러지 마라고 번역한 부분은 오역입니다. 원문은 정반대에요.  머니볼은 감독이나 스카우트들의 경험이나 감(즉 시장조사)에 의지하기보다는 전문 통계정보를 의지한 팀이 Underdog의 반란을 이루어냈다라는 책이거든요. 메이저리그 좋아하시는 분들께는 &lt;a href=&quot;http://a.co/2orsCkM&quot;&gt;머니볼 책도&lt;/a&gt; 추천해드립니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 12:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/07/02/different-escaping-the-competitive-herd.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/07/02/different-escaping-the-competitive-herd.html</guid>
        
        <category>blog</category>
        
        <category>book</category>
        
        <category>different</category>
        
        <category>management</category>
        
        <category>strategy</category>
        
        
      </item>
    
      <item>
        <title>문체부의 불법 유통 해외사이트 집중 단속에 붙여</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글에서 등장하는 JYB, 갑돌이는 실제의 어떤 단체나 인물과도 관계가 없으며 설명을 위한 가공의 이름입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문체부가 2018년 5월 2일
&lt;a href=&quot;http://www.mcst.go.kr/web/s_notice/press/pressView.jsp?pSeq=16672&quot;&gt;웹툰 등 불법 유통 해외사이트 집중 단속 및 정품 이용 캠페인 연계 실시&lt;/a&gt;에 대하여 보도자료를 발표하였습니다. 그 내용에 따르면 (1) 법률개정을 통해 유해사이트 차단 절차를 간소화하겠다. (2) HTTPS 접속에 대해서도 SNI 필드를 이용해 차단하겠다. (3) SNI차단 전 까지는 DNS를 차단하겠다. 라고 하고 있습니다.&lt;/p&gt;

&lt;p&gt;불법 사이트의 차단 당위성은 이론의 여지가 없습니다. 그러나 차단 방식에 대해서는 반대하는 의견들이 있는데요, 우선 첫번째로 &lt;em&gt;“시민의 통신을 검열하겠다는 것이냐? 반대다.”&lt;/em&gt;라는 기본권 측면에서의 반대 의견이 있고요, 다음으로는 &lt;em&gt;“어차피 차단 안돼.”&lt;/em&gt;라는 기술적 측면에서의 반대의견이 있습니다. 이번 글에서는 기술적 측면에서 불법 사이트 차단 문제를 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;인터넷-사이트-접속&quot;&gt;인터넷 사이트 접속&lt;/h2&gt;
&lt;p&gt;인터넷에서 정보를 제공하는 사이트는 주소가 있습니다. IP(Intenet Protocol) 주소라고 합니다. 인터넷 사이트 네이버의 IP 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;210.89.164.90&lt;/code&gt; 입니다. 브라우저 주소창에 &lt;code class=&quot;highlighter-rouge&quot;&gt;210.89.164.90&lt;/code&gt;을 입력하면 네이버가 뜰 것입니다.&lt;/p&gt;

&lt;p&gt;숫자로 된 IP주소는 사람들이 기억하기에 어렵습니다. 그래서 인터넷 사이트를 “도메인 주소 체계”로 표기할 수 있도록 하였습니다. 네이버의 도메인 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;입니다. 브라우저 주소창에 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;을 입력하면 마찬가지로 네이버 창이 뜨게 됩니다.&lt;/p&gt;

&lt;p&gt;컴퓨터가 인터넷 통신을 할 때 필요한 것은 IP주소입니다. 도메인 주소로 인터넷 사이트 접속을 하고 싶을 때에는 도메인 주소에 대응되는 IP주소를 알아야 합니다. 컴퓨터는 그를 위해 DNS(Domain Name Service) 서버에 물어보고, IP주소가 응답되면 그 IP주소로 통신을 진행합니다.&lt;/p&gt;

&lt;p&gt;IP주소를 알아내어서 사이트에 접속할 경우 예전에 사용했던 방식은 HTTP(HyperText Transport Protocol)입니다. 최근에는 HTTPS (HTTP Secure / HTTP over SSL)이 많이 사용되는데, HTTPS는 HTTP에 비하여 처음 접속하는 도메인 주소를 제외하고는 대부분이 암호화 되어있다는 차이점이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;https-사이트-차단&quot;&gt;HTTPS 사이트 차단&lt;/h2&gt;
&lt;p&gt;과거 인터넷 접속의 많은 부분이 HTTP였던 경우에는 통신 경로 상에서 목적지 주소를 알 수 있었습니다. 차단을 위해서는 통신선로상 노출되어 있는 도메인 주소나 URL (웹브라우저에서 사용하는 주소창의 세부주소입니다)을 이용할 수 있었습니다. 그러나 HTTPS의 등장 및 보급에 따라 차단을 피하고자 하는 사이트는 모두 HTTPS로 옮겨갔죠. HTTPS 서비스의 경우 URL을 알 수 없고, 목적지도 HTTPS에서 사용되는 특수 통신 단계를 분석해야 목적지 도메인 네임만을 알 수 있을 뿐입니다.&lt;/p&gt;

&lt;p&gt;나쁜 사이트의 도메인 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;, IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;123.123.123.123&lt;/code&gt;이라고 하고, 차단 공지 서버의 IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;이라고 하겠습니다.&lt;/p&gt;

&lt;p&gt;문체부가 이야기하는것은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 도메인 서버로의 질의요청을 보고 차단 대상인 경우 응답을 거부하거나 해당 도메인 주소에 대한 IP주소로써 실제 주소가 아닌 가짜 서버의 IP주소를 반환하도록 하여 사이트 접속을 막겠다 입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;의 IP주소가 무엇인가요? 에 대한 대답으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;을 반환하도록 하여, 사용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;에 접속을 해 보면 “유해사이트이므로 차단합니다”라는 공지화면을 받을 수 있도록 하겠다는 것입니다.&lt;/li&gt;
  &lt;li&gt;이후 HTTPS 목적지 분석이 가능해지면 해당 목적지의 도메인 네임을 가지고 차단하겠다는 것입니다. HTTPS 통신상의 목적지 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;이면 해당 통신을 끊어버리는 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재의 상황에서는 가장 합리적인 접근이라고 생각합니다.&lt;/p&gt;

&lt;h2 id=&quot;통신-자유를-위한-움직임-dns&quot;&gt;통신 자유를 위한 움직임: DNS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/audio-dj-mix-63703.jpg&quot; alt=&quot;솔로가 하고 싶어요&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;저는 한 아이돌 그룹의 막내 갑돌이에요. 솔로가 하고싶어서 형들 모르게 JYB로 이적하고 싶어요. 이적을 위한 등록 서버 주소를 알려주세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 주소를 주면 IP 주소를 알려주는 DNS 시스템은 그 구조상 통신 경로에 모든 요청과 응답이 노출됩니다.
갑돌이가 사무실 PC로 JYB서버에 접속했을 뿐이라도 그 내용을 누군가 다 알 수 있다는 거에요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;알 수 없는 이유로 모 아이돌 그룹의 막내 멤버가 교체된다는 찌라시가 돌고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTPS를 이용한 암호화 접속을 하더라도 제일 기본적인 DNS 서버에서는 누가(갑돌이 PC의 IP주소) 어떤 서버 (JYB 내부 웹 서버 도메인 주소)의
주소를 요청했는지 알 수가 있고요, 서버 뿐만이 아니라 모든 통신 경로상에서 해당 정보를 알아 낼 수가 있습니다.&lt;/p&gt;

&lt;p&gt;이런 정보는 돈이 되는 정보지요. 개개인을 향한 타겟 광고 시장이 굉장히 크기 때문에 많은 회사들은 &lt;strong&gt;“여러분들이
어떤 사이트를 방문하는지”를 알기 위해서 많은 돈을 집행합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인터넷 서비스의 근간이 되는 DNS가 너무 보안상 취약하다보니 이를 개선하기 위한 노력이 진행되어 왔는데요
최근 Mozilla가 자사의 브라우저인 Firefox에서 Cloudflare사의 DNS서비스와 연동하여 DNS 보안 문제를 해결하고자 제안하였습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에서 시스템 DNS 서버를 이용하지 않고, 별도로 준비된 &lt;strong&gt;믿을 수 있는 DNS 서버&lt;/strong&gt;를 이용한다. &lt;a href=&quot;https://wiki.mozilla.org/Trusted_Recursive_Resolver&quot;&gt;(Trusted Recursive Resolver)&lt;/a&gt;&lt;br /&gt;
클라우드플레어사는 DNS서비스 후 24시간 이후에 서비스 로그를 파기하며, 이에 대해 주기적 감사를 통해 투명하게 공개하겠다고 하였습니다.
즉 ‘이 회사는 고객 정보를 팔아먹지 않을 것 같다. 갑돌이의 인터넷 접속정보를 소속사에 넘기지 않을거 같다..’라는 것이구요.&lt;/li&gt;
  &lt;li&gt;믿을 수 있는 DNS 서버와는 &lt;strong&gt;DNS over HTTPS&lt;/strong&gt;를 이용한다.&lt;br /&gt;
“DNS서버는 믿을수 있다 쳐, 통신 선로상에서 볼 수 있잖아. 소속사 전산실에서 다 본다던데? 갑돌이를 지켜주세요” 라는
팬 분의 요청을 위해서 도메인 주소 질의응답을 암호화된 HTTPS를 이용하여 사용한다는 것입니다.&lt;/li&gt;
  &lt;li&gt;DNS 질의시 개인정보 보호를 위하여 최소한의 개인 정보를 전송한다.&lt;br /&gt;
“클라우드플레어를 믿는다 쳐도, 클라우드플레어에서 어차피 하부 도메인 서버로 물어봐야될 텐데, 2차 도메인 서버에서 정보유출이나
응답변조가 있을수도 있잖아?”
이런 것을 막기 위하여 2차 도메인 서버에 질의를 할 때 “누가”를 “갑X이” 혹은 “X돌이” 이런 식으로 간략화 하거나
아니면 아예 대리인명의로 질문을 던지도록 하고요,
또한 2차서버로 물어볼 때, 꼭 필요한 도메인 부분만을 전송하도록(&lt;a href=&quot;https://datatracker.ietf.org/doc/rfc7816/?include_text=1&quot;&gt;Qname Minimisation&lt;/a&gt;)하여 정보 유출을 최소화 하는 기술을 사용한다는것 입니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enroll.jybe.com&lt;/code&gt;의 주소가 뭐냐고 온 사방팔방에 묻는 것이 아니라&lt;/li&gt;
      &lt;li&gt;처음에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;의 주소가 뭐에요 물어서 그 관장하는 서버를 알고,&lt;/li&gt;
      &lt;li&gt;그 서버에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;jybe.com&lt;/code&gt; 주소가 뭐에요 물어봐서 또 해당 서버를 알고,&lt;/li&gt;
      &lt;li&gt;그 다음에서야 &lt;code class=&quot;highlighter-rouge&quot;&gt;jybe.com&lt;/code&gt;을 담당하는 서버에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;enroll.jybe.com&lt;/code&gt; 주소가 뭐에요? 물어보는 것이지요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 되면 도메인 서버와의 통신에서 개인 정보들이 지켜지게 되고, 우리의 갑돌이는 JYB에 누구도 모르게 서류를 전송할 수 있겠습니다.
그리고 문체부에서 DNS로 사이트 차단을 할 수가 없게 되겠구요.&lt;/p&gt;

&lt;p&gt;제 생각에는 Mozilla사의 위의 제안이 충분한 설득력을 가지기 때문에 Google이나 기타 브라우저 제작사에서도 유사한 기능을 탑재하게 되지 않을까 예측합니다.&lt;/p&gt;

&lt;h2 id=&quot;그렇다면-https는&quot;&gt;그렇다면 HTTPS는?&lt;/h2&gt;

&lt;p&gt;이렇게 하여 DNS까지는 거의 완벽한 프라이버시가 지켜지게 되었다고 합시다.&lt;/p&gt;

&lt;p&gt;그러면 HTTPS는 어떻게 될까요? 처음 접속하는 도메인 주소만을 “제외”하고 나머지가 대부분 암호화 된다고 말씀드렸죠?
그래서 문체부 자료에서 언급된 HTTPS 통신의 해당 정보 (SNI: Server Name Indication)를 이용한 차단은 현재 상황에서 합리적이라고 말씀드렸습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 되나 한 번 넣어봤을 뿐인데 이렇게 될 줄은 몰랐어요. - 갑돌&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;네. SNI주소가 노출되기 때문에 사용자의 인터넷 사이트를 모니터링하거나 차단할 수 있는 것입니다.&lt;/p&gt;

&lt;p&gt;해당 정보도 암호화 하면 되지 않나? 라는 의견에는, 다음 표준에는 그럴 수 있겠으나 일단 표준화가 되었으니 앞으로 한참 동안은 
해당 정보의 암호화는 어렵다라고 말씀드리고 싶네요.&lt;/p&gt;

&lt;p&gt;그렇지만 HTTP/2에서 SNI 차단을 우회할 수 있는 방안이 존재합니다. &lt;a href=&quot;https://daniel.haxx.se/blog/2016/08/18/http2-connection-coalescing/&quot;&gt;HTTP/2 Connection Coalescing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP/2는 하나의 서버와는 하나의 연결을 맺어두게 되고 하나의 연결을 이용하여 여러 서비스를 제공하게 됩니다. 
눈치 빠르신 분은 짐작하실 수도 있겠습니다만, 차단/감시대상과 전혀 무관한 도메인 주소가 해당 서버에 동시에 부여가 되면, 그 주소로 일단 접속한 이후에 감시대상 서버로의 접속은 SNI정보를 전송할 필요가 없다는 것입니다.&lt;/p&gt;

&lt;p&gt;나쁜 사이트의 도메인 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;, IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;123.123.123.123&lt;/code&gt;이라고 할 때, 이 서버에 또 다른 도메인 주소인 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt; 을 등록했다고 한다면 아래와 같이 되는 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에서 HTTP/2로 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt; 접속. 이 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt;이 SNI로 전송됩니다.&lt;/li&gt;
  &lt;li&gt;브라우저에서 HTTP/2로 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt; 접속. 이 때에는 SNI로 전송되는 것이 없으며, 따라서 감시나 제어를 할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;익명의 인재지원을 환영합니다.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;www.free-right.com&lt;/code&gt;에 접속후 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.jybe.com&lt;/code&gt;에 접속하십시오. -JYB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프라이버시에 민감한 글로벌 CDN업체의 경우 이와 유사한 방안을 멀지 않은 시기에 도입할 것으로 예측합니다.
반대 급부로 불법 업체가 악용한다고 하여도, 이익 단체인 CDN업체입장에서는 별도로 신고가 들어오기 전 까지는 방치하지 않을까요?
이런 서비스를 공개하면 많은 고객들이 사용할 테니까요.&lt;/p&gt;

&lt;h2 id=&quot;그러면-어떻게-해&quot;&gt;그러면 어떻게 해?&lt;/h2&gt;

&lt;p&gt;기술의 발전 및 프라이버시의 강화 조류를 볼 때 공개된 통신망에서 정보를 차단하는 것은
점차 어려워지는 방향으로 가고 있다고 생각합니다.&lt;/p&gt;

&lt;p&gt;과도기에 손을 놓고 있을 수 만은 없다고 생각하기에 개인적으로 이번 문체부 정책에 대해 긍정적인 편입니다만,
추후 네트워크 상에서 대책이 없어질 수 있다는 점을 상정하여 정책 고민 및 입안이 필요하다는 말씀 드리고 싶습니다.&lt;/p&gt;

&lt;p&gt;중국의 &lt;a href=&quot;https://namu.wiki/w/%ED%99%A9%EA%B8%88%EB%B0%A9%ED%8C%A8&quot;&gt;황금방패&lt;/a&gt;처럼 갈 수는 없지 않겠습니까?
DNS over HTTP를 차단할 수도, HTTP/2를 차단하는 것 도 현 시대에 맞지 않는 방법입니다.&lt;/p&gt;

&lt;p&gt;네트워크망이 아닌 사용자 단말에서의 유해/불법정보 차단 방안, 그리고 그것을 장려하는 법제화, Opt-in이 아닌 Opt-out 방안의 고민 등이 이루어져야 하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PC랑 스마트폰에 보안솔루션 꼭 깔아야해요?&lt;/p&gt;

  &lt;p&gt;왜요?&lt;/p&gt;

  &lt;p&gt;왜! - 갑돌&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 15:10:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/06/01/internet-filtering.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/06/01/internet-filtering.html</guid>
        
        <category>blog</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>web filtering</category>
        
        <category>dns</category>
        
        
      </item>
    
      <item>
        <title>*.co.kr 인증서가 발급되었습니다.</title>
        <description>&lt;p&gt;식목일입니다. 출근하니 인터넷이 전자정부 와일드카드 인증서때문에 시끌시끌하네요.&lt;/p&gt;

&lt;p&gt;인증서는 전 세계를 대상으로하는 주민등록증이라고 할 수 있는데 정부에서 운영을 잘 해주었어야 한다고 생각합니다.&lt;/p&gt;

&lt;p&gt;오늘의 사건에 대해서 쉽게 풀어보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;인증서&quot;&gt;인증서&lt;/h2&gt;

&lt;p&gt;인터넷 통신의 많은 부분이 프라이버시를 위하여 암호화 통신을 합니다. 인터넷으로 물건을 사고 송금을 하고 메세지를 보낼 때 통신 대상을 제외한 타인이 볼 수 없도록 되어있습니다. 그러면 이제 ‘내가 이야기하는 사람이 정말 내가 이야기하려는 사람이 맞나’만을 확인하면 안전한 통신을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;“저는 갑돌이와 이야기 하고 싶어요. 갑돌이에게만 돈을 보내야해요” 라는 을순이가 “안녕 나야, 갑돌이, 나 지금 돈이 필요한데 백만원만 보내줄래?”라는 메세지를 받는다고 돈을 부쳐서 발생하는 사건들은 잘 아시지요? &lt;strong&gt;인증서&lt;/strong&gt;는 이 때 주민등록증처럼 제시할 수 있습니다. 이 인증서는 그에 상응하는 암호키를 가진 사람만 암호화 통신에서 사용할 수 있어요. 즉, 암호화 통신을 할 때 받은 인증서를 보면 상대방이 누군지 확실히 알 수 있는겁니다. “아, 너 갑돌이 맞구나. 무슨일이야, 백만원 보내줄께”&lt;/p&gt;

&lt;h2 id=&quot;인증기관-ca-certificate-authority&quot;&gt;인증기관 (CA: Certificate Authority)&lt;/h2&gt;

&lt;p&gt;을순이가 너그럽다는 것을 안 병태는 메신저상에서 을순이를 속이려고 해요.&lt;/p&gt;

&lt;p&gt;“을순아 나 갑돌인데, 교통사고를 냈어. 급히 백만원이 필요해.”&lt;/p&gt;

&lt;p&gt;을순이가 상대방의 인증서를 봤더니 이름이 갑돌이인거에요. 을순이는 너그럽기는 했지만 꼼꼼한 성격이었기 때문에 인증서의 발급기관을 확인합니다. 보니까 발급기관이 대한민국이 아니고 버뮤다라고 되어 있네요?&lt;/p&gt;

&lt;p&gt;“너 갑돌이 아니구나, 이 얌생이! 사기치지말아” 하면서 을순이는 메신저를 꺼버리게 되었습니다.&lt;/p&gt;

&lt;p&gt;인증서 자체는 누구나 만들 수가 있어요. 그럼 그것을 어떻게 믿을까요? 대한민국이 발급한 주민등록증만 믿는 것 처럼, 인증서 역시 신뢰된 소수의 기관이 발급한 인증서만을 믿도록 인터넷은 구성되어 있어요.&lt;/p&gt;

&lt;p&gt;인증서를 발급해 주는 기관을 CA라고 합니다. CA는 인증서 발급 요청을 받으면 요청받은 인증서에 인감도장을 찍어줘요. 즉 전자 서명을 붙여주는 것이에요. 
사용자는 그 전자 서명을 보고 “나, 이 CA는 믿고 있어. 그러니까 이 CA의 인감도장이 찍혀 있으니 이 인증서도 믿을래” 라고 생각하게 되는 것이에요.
그래서 인증기관의 역할은 굉장히 중요하고, 인증기관은 자신의 신뢰도를 유지하기 위하여 노력을 하고 있죠.&lt;/p&gt;

&lt;h2 id=&quot;사고치는-인증기관들&quot;&gt;사고치는 인증기관들&lt;/h2&gt;

&lt;p&gt;인증기관도 사람이 운영하기 때문에 실수도 있을 수 있고, 의도적으로 사고를 칠 수도 있습니다.
병태가 정식으로 갑돌이 인증서를 발급받을 수 있다면 어떻게 되겠어요?&lt;/p&gt;

&lt;p&gt;그런데 그것이 실제로 일어났습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2017년 1월에 Symantec사가 도메인 소유자가 아닌 사람에게 인증서를 발급해준다는 리포트가 나옵니다.
  (이 사건에도 우리나라가 등장합니다. 해당 인증서는 Symantec이 인증한 기관인 우리나라의 Crosscert사에서 발급한 것입니다. 으음..)
  &lt;a href=&quot;https://www.mail-archive.com/dev-security-policy@lists.mozilla.org/msg05455.html&quot;&gt;관련정보&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;그래서 사람들이 Symantec사를 들여다보았더니, Crosscert이외에도 다른 여러 기관에 특별한 관리감독 없이 인증서를 발급할 권리를 주었고, 그 결과로 발급된 인증서들의 수가 30,000에 이른다고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 사건이 어떻게 끝났냐고요? 구글과 모질라사는 시만텍사가 발급한 인증서를 모두 취급정지하였고
(&lt;a href=&quot;https://blog.qualys.com/ssllabs/2017/09/26/google-and-mozilla-deprecating-existing-symantec-certificates&quot;&gt;관련기사&lt;/a&gt;)그 여파로 시만텍사는 자사의 인증서 사업부를 Digicert사에 매각하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;오늘의-사건&quot;&gt;오늘의 사건&lt;/h2&gt;

&lt;p&gt;우리나라에도 전자정부 서비스를 위하여 인증기관이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;행정전자서명 인증관리센터 (GPKI: Government Public Key Infrastructre) &lt;a href=&quot;https://www.gpki.go.kr&quot;&gt;https://www.gpki.go.kr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 GPKI에서 교육부에 아래의 인증서를 발급하였습니다.
인증서는 2015년 6월부터 2017년 9월까지 유효한 인증서이며, 발급기관(Issuer)이 대한민국 정부(Government of Korea)의 GPKI라고 명시되어 있죠. Subject를 보면 support.gne.go.kr을 대표할 도메인으로 만든 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/gpki_wildcard_cert1.png&quot; alt=&quot;문제의 인증서&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문제는 이 인증서가 support.gne.go.kr 말고도 다른 여러 도메인을 대표하고 있고, 그 안에 &lt;strong&gt;*.co.kr&lt;/strong&gt;과 &lt;strong&gt;*.go.kr&lt;/strong&gt;, &lt;strong&gt;*.or.kr&lt;/strong&gt;등이 포함되어 있다는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/gpki_wildcard_cert2.png&quot; alt=&quot;문제의 인증서가 대표하는 도메인들&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 이 인증서를 탑재한 사이트는 https://president.go.kr(청와대), https://kait.or.kr(한국정보통신진흥협회), https://lgcns.co.kr(LGCNS) 등을 자처할 수 있게 됩니다. DNS를 이용한 피싱이나 중간자공격(Man-In-The-Middle)등이 가능해지는 등 인터넷상의 보안 사고의 가능성이 열리게 되는 거에요.&lt;/p&gt;

&lt;p&gt;CA/Browser 포럼은 인증기관이 이런 문제가 있을만한 와일드카드 도메인의 발급 요청을 허락하여서는 절대로 아니된다(MUST NOT)고 규정하고 있습니다. (&lt;a href=&quot;https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.5.6.pdf&quot;&gt;Baseline Requirements 문서의 3.2.2.6 Wildcard Domain Validation 참고&lt;/a&gt;) *.mycompany.co.kr은 발급해 줄 수 있으나, *.co.kr은 안된다는 거에요.&lt;/p&gt;

&lt;p&gt;인증기관 업무의 중요성이 간과되었기에 발생한 일일 것이라고 생각합니다.
오늘 인터넷에 회자되어서 그렇지 이것은 과거에 벌어진 일이고 위의 인증서는 이미 만료되었습니다.
그러나 다른 인증서들에 문제가 없는지 점검하여 문제가 있다면 폐기하고, 
유사한 일이 다시 생기지 않도록 앞으로 잘 운영해 나가는 것이 중요하겠죠.&lt;/p&gt;

&lt;h2 id=&quot;잘못된-인증서의-발급을-어떻게-알-수-있었나요&quot;&gt;잘못된 인증서의 발급을 어떻게 알 수 있었나요&lt;/h2&gt;

&lt;p&gt;인증서 운영의 투명화를 위하여 여러 인증기관은 인증서를 발급할 때에 인증서 투명 로그 (Certificate Transparency Log)에 발급한 인증서를 등록하고 있습니다. 이번 사건과 같이 잘못된 형태의 도메인에 대해서 인증서가 발급이 되는지, 혹은 내 회사 도메인에 대해서 다른 제3자가 발급을 하는지에 대한 모니터링이 가능합니다.&lt;/p&gt;

&lt;p&gt;또한 브라우저마다, 인증서를 투명하게 공개하지 않은 인증서에 대해 경고를 하는 기능이 탑재될 예정에 있습니다.&lt;/p&gt;

&lt;p&gt;잘못된 인증서를 슬그머니 발급하려고 해도 이제 안돼요.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Apr 2018 09:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/04/05/omg-wildcard-cert-co-kr.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/04/05/omg-wildcard-cert-co-kr.html</guid>
        
        <category>blog</category>
        
        <category>ssl</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>certificate transparency</category>
        
        <category>GPKI</category>
        
        
      </item>
    
      <item>
        <title>HTTPS를 쓴다고 안심할 수 만은 없다는데, 왜?</title>
        <description>&lt;p&gt;인터넷 사용시 HTTP를 이용하면 도청이 가능하고, 변조가 가능하며, 인증이 결여되어 있기 때문에 최근 브라우저들은 HTTP사이트를 방문하면 안전하지 않은 연결이라고 안내하는 추세입니다. 전자입찰을 한다고 보았을때, 입찰가가 유출되고(도청), 입찰가를 해커가 바꿀 수 있으며(변조), 입찰을 제대로 했다고 생각했지만 그게 아니라 (인증결여) 입찰에 탈락할 수가 있는거죠. 그렇기 때문에 안전한 HTTPS, 즉 암호화 통신경로로 많은 서비스들이 옮겨가고 있죠. 인터넷 사용시 주소창에 녹색 자물쇠가 나타나면 아, 나의 통신은 안전하구나.. 하고 안심하면 되는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/life-of-pix-free-stock-photos-spain-door-padlock2.jpg&quot; alt=&quot;주소창에 자물쇠가 보이면 안전하다구?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그/러/나 꼭 그렇지만도 않습니다!&lt;/p&gt;

&lt;p&gt;암호화 통신이라는 것은 양날의 검이어서 나도 안전하게 이용할 수 있지만, 해커들도 검문없이 드나들 수가 있게됩니다. 자유는 위험을 수반하고 보안은 불편이 따라붙죠. 그래서 우리들이 이용하는 암호화 통신은 통신 경로상에서 암호화를 벗겨서 내용을 검사하는 과정, 즉 복호화 과정을 거칩니다. 이게 꼭 나쁜것만은 아니에요. 보안은 불편을 수반한다니까요. 그럼 어떤 녀석들이 복호화를 하는가 하는지 볼까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anti-Virus S/W: PC나 휴대폰에 설치된 Avast나 AVG등의 앤티바이러스 소프트웨어들. PC 및 휴대기기를 지키기 위해서 외부와 주고받는 암호화 통신을 검사합니다.&lt;/li&gt;
  &lt;li&gt;회사 내의 보안 장비: 회사, 학교, 단체들은 외부로부터의 보안위협, 즉 악성코드나 랜섬웨어들로부터 내부를 지키기 위하여 암호화 통신을 검사합니다. 보안등급이 높은 단체는 내부의 귀중한 자료, 예를 들면 반도체 설계도면 등이 밖으로 유출되지 않도록 지키기 위하여 검사하기도 합니다.&lt;/li&gt;
  &lt;li&gt;ISP 장비: ISP, 특히 모바일 ISP의 경우 트래픽 분석/최적화를 위하여 통신을 검사합니다.&lt;/li&gt;
  &lt;li&gt;악성코드: 위의 3가지 분류는 좋은 목적(?)으로 통신 검사를 하지만, 반대로 개인정보를 유출하기 위해 통신을 검사하는 악성 코드가 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;암호화 통신이 정말 저렇게 많이 중간에 검사가 될까요? 그렇습니다. 2017년 NDSS 심포지움에서 발표된 “The Security Impact of HTTPS Interceptions”&lt;sup&gt;&lt;a href=&quot;#footnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 논문의 내용을 간단히 소개해드리겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS 트래픽 중 5~10%가 경로 중간에서 복호화 되고 있다(Interception)&lt;/li&gt;
  &lt;li&gt;Antivirus S/W, Bluecoat 기기, Mobile api등이 주된 녀석들&lt;/li&gt;
  &lt;li&gt;과테말라가 15%, 그린랜드가 10%, 그리고 한국이 8.8%로 복호화 율 최고!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;뭐 좋은 의미로 중간에서 복호화 할 수도 있겠죠. 내 암호화 데이터를 중간에서 나도 모르게 들여다본다니 기분은 상할 수도 있겠지만요. 하지만 문제는 중간에 난입한 저 장비들이 보안을 망쳐버릴수 있다는 것입니다. 잘 포장된 선물을 경비원이 검문한다음에 대충 스카치테이프로 붙여서 돌려준다고나 할까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중간의 장비들 때문에 원래의 보안 수준이 망쳐지는 비율이 굉장히 많다라는 것이 [1]에 조사되어 있습니다. A등급 보안이 F등급으로 변하는 비율이 8~36%입니다. 중간에 끼어들지 않으면 완벽한 보안이, 중간의 복호화장비가 잘못 하여 누구나 도청할 수 있는 보안수준으로 망가진다는 이야기입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;왜 그럴까요? 보안장비 만드는 사람들의 월화수목금금금 스케쥴 때문에 그럴 수도 있겠지만.. :-) 원래 보안 프로그래밍이 어려운 것이다라는 이야기가 더 맞겠지요. Texas Austin에서 2012년에 발표한 논문&lt;sup&gt;&lt;a href=&quot;#footnote2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;의 연구결과를 보시지요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;보안 API가 원래 쓰기가 어렵게 만들어져 있어서 보안 프로그래밍을 제대로 하기가 어렵다.&lt;/li&gt;
  &lt;li&gt;Google, MS, Mozilla들이 만드는 브라우저들은 품질을 맞추지만, 그렇지 않은 경우, 즉 브라우저가 아닌 보안제품의 경우는 품질이 떨어질 수 밖에 없는데, 예를 들면
    &lt;ul&gt;
      &lt;li&gt;Amazon Payment, Paypal, Lynx, Apache Client, Trillian 메신저, Rackspace 관리도구, TextSecure 안드로이드 앱, Apache Axis, Pusher, Chase mobile banking, Amazon Elastic LB API, 여러 Shopping cart, Google Admob, AIM등, 괜찮을 것 같은 앱들도 다 부실하게 만들어 놓았더라.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러면 어떻게 해야 할까요? 일부 보안강도가 높은 서비스들은 고정 공개 키(Public Key Pinning)등의 기법들을 사용하여 중간에 복호화하는 기기가 있으면 아예 서비스를 중단하도록 하기도 해요. 모든 서비스들에 대해서 중간에 복호화 하지 말도록 해야 할까요? 이 경우  중간에 복호화 장비의 순기능을 없애버리게 되는것이죠. 결국 한쪽 극단은 해답이 되기 어렵고요, 중용의 묘를 살려야 하겠습니다.&lt;/p&gt;

&lt;p&gt;오늘의 결론은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 주소창에 초록 자물쇠가 뜬다해도 중간에 복호화 장비가 &lt;strong&gt;삽질&lt;/strong&gt;을 하는 경우 내 데이터는 여전히 위험해요.&lt;/li&gt;
  &lt;li&gt;그렇다고 복호화 장비나 Anti-Virus를 &lt;em&gt;안쓰면 또 위험해져요&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;따라서 &lt;strong&gt;삽질&lt;/strong&gt;을 하는 복호화 장비, &lt;strong&gt;삽질&lt;/strong&gt;을 하는 안티바이러스를 쓰지 말고 좋은 제품을 골라서 사용해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a id=&quot;footnote1&quot;&gt; [1]&lt;/a&gt; &lt;a href=&quot;https://jhalderm.com/pub/papers/interception-ndss17.pdf&quot;&gt;Zakir Durumeric et al, The Security Impact of HTTPS Interception, NDSS ‘17&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id=&quot;footnote2&quot;&gt; [2]&lt;/a&gt; &lt;a href=&quot;http://www.cs.columbia.edu/~suman/docs/suman_ccs12.pdf&quot;&gt;Martin Georgiev et al, The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software, CCS ‘12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 17:15:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/03/28/is-https-really-safe.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/03/28/is-https-really-safe.html</guid>
        
        <category>blog</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>https</category>
        
        <category>interception</category>
        
        
      </item>
    
      <item>
        <title>HTTPS 사용이 100%가 된다면?</title>
        <description>&lt;p&gt;HTTP 사이트가 HTTPS 사이트로 전환되고 있는 추세에 대해서는 잘 아시고 계시지요? 웹 트래픽 중 양적으로나 수적으로 60%정도 사용되고 있고, 계속 증가 추세입니다. 그 추세는 점유율이 어느정도가 되면 완만하게 꺾일 것이라고 저도, 그리고 여러분도 생각하고 있을 텐데요, 그 어느 정도가 어느 정도 일까요? HTTPS의 실질적 사용이 100%에 근접하지는 않을까요?&lt;/p&gt;

&lt;p&gt;초기에 HTTPS의 사용이 증가한 이유는 유튜브 등의 일부 OTT 사이트가 HTTPS 사이트로 전환되었기 때문입니다. 그러나 최근의 증가 추세는 주요 브라우저 벤더들이 HTTPS를 밀어주고 있기 때문입니다. 어떤 관리자가 자신의 웹 페이지를 방문하면 브라우저에 보안이 취약하다고 난리(?)를 치는데 그냥 둘까요? 브라우저 변화와 HTTPS의 점유&lt;sup&gt;&lt;a href=&quot;#footnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;의 상승에 대한 흥미로운 자료&lt;sup&gt;&lt;a href=&quot;#footnote2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;가 있습니다. 다음을 보시지요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|Date     | HTTPS | 사건
|2013     |  25%  | NSA에서 정보 감청을 하고 있음이 알려짐
|2014 Dec |  32%  | Google - 크롬에서 HTTP를 몰아낼 계획발표 - HTTP방문시 적색경고 예정
|2015 Apr |  35%  | Mozilla - Firefox에서 HTTP를 몰아낼 계획 발표
|2015 Oct |  38%  | 무료 인증서 Let's Encrypt가 주요 브라우저에서 인식
|2016 Jun |  45%  | Apple - 앱들은 ATS 의무장착. ATS는 HTTPS만을 사용
|2017 Jan |  52%  | 크롬56부터 HTTP사이트에서 패스워드/카드정보를 입력할 경우 취약성 경고.  
		    Firefox에서도 HTTP사이트에서 사용자명/패스워드를 입력시 경고
|2017 Apr |  56%  | Google - 10월부터 크롬에서 다음 두가지 상황에서 취약성 경고 예고.  
		    (1) HTTP페이지에서 데이터 입력시 
		    (2) 비밀브라우징모드에서 HTTP페이지 방문시
|2018 Jan |  70%  | Mozilla - HTTP방문시 새로운 웹 기능들을 제공하지 않는다고 예고
|2018 Feb |  70%  | Google - 7월부터 모든 HTTP사이트에 대하여 취약하다고 경고
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google과 Mozilla는 현재의 “HTTPS:안전, HTTP:보통”의 자세에서 “HTTPS:보통, HTTP:취약”으로 태세 전환을 예고했습니다. Google은 또 인터넷 주소 입력시 HTTPS를 먼저 방문하겠다는 계획도 발표했습니다. www.naver.com 을 주소창에 입력할 때 지금은 http://www.naver.com 으로 접속되지만 (실제로 해 보시면 https사이트로 유도되는데요, 그것은 처음에 http로 접속이 완료된 후 웹 사이트 설정으로 인해 https://www.naver.com으로 유도되기 때문입니다), 어느 순간부터는 https://www.naver.com 으로 바로 접속이 된다는 것입니다.&lt;/p&gt;

&lt;p&gt;Let’s Encrypt와 같이 무료 인증서를 발급하는 CA도 늘어날 것으로 예상되기 때문에, 인증서 비용은 HTTPS 보급에 진입 장벽이 되지 않을 것으로 생각됩니다.&lt;/p&gt;

&lt;p&gt;메이저 브라우저들이 HTTPS를 이렇게 밀고 있으니 HTTPS 실질적 사용이 지속적으로 올라가지 않겠습니까? 그 때 어떤 변화와 기회와 위기가 기다리고 있을까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a id=&quot;footnote1&quot;&gt;[1]&lt;/a&gt; Firefox의 텔레메트리 데이터와 Let’s Encrypt에 기인한 수치입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a id=&quot;footnote2&quot;&gt;[2]&lt;/a&gt; &lt;a href=&quot;https://blog.cloudflare.com/https-or-bust-chromes-plan-to-label-sites-as-not-secure/&quot;&gt;https://blog.cloudflare.com/https-or-bust-chromes-plan-to-label-sites-as-not-secure/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Mar 2018 10:15:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/03/24/if_https_usage_becomes_100_percent.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/03/24/if_https_usage_becomes_100_percent.html</guid>
        
        <category>blog</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>https</category>
        
        
      </item>
    
      <item>
        <title>현재 TLS1.3의 낮은 보급, 하지만 개봉박두</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/why-tls-1-3-isnt-in-browsers-yet/&quot;&gt;Cloudflare의 Nick Sullivan씨의 글&lt;/a&gt;을 풀어본 것입니다.&lt;/p&gt;

&lt;p&gt;현재 TLS1.3은 호환성 이슈가 많다. 보안성 강화와 빠른 속도를 장점으로 가지는 TLS1.3에 대해서 많은 브라우저들이 구현체를 탑재하였지만 대부분 기본적으로 비활성화 되어있다. 그 문제는 TLS 1.3 프로토콜 자체에 있다기 보다는 미들박스, 즉 이미 많이 도입되어 있는 SSL-proxy들이 TLS1.3 통신에 있어 장애요소가 되기 때문이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TLS 세션이 처음 맺어질때 클라이언트와 서버는 각각 자신의 최대 지원 가능 TLS버젼을 보내면 그 중 작은 값의 버젼으로 통신이 이루어진다. 이 간단한 프로토콜을 잘 지키지 못하는 서버들이 있다는 것이 문제의 시발점이다. TLS1.2를 오퍼받았을때, TLS1.0으로 카운터오퍼해야 정상인데 세션을 끊어버리는 서버들이 상당히 많이 존재한다. 그래서 브라우저들은 세션이 끊어졌을 때 낮은 TLS버젼으로 재시도를 하게 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TLS1.2로 하자 → 아니 대신 TLS1.0으로 하자 (secure downgrade. 전화연결이라고 볼 때 연결이 끊기지 않고 바로 통화. 바람직한 접근)&lt;/li&gt;
  &lt;li&gt;TLS1.2로 하자.. 아니 얘가 전화를 끊네. 그럼 TLS 1.1로 하자.. 아니 또 끊네.. 그럼 TLS1.0으로 하자.. SSLv3로 하자… (insecure downgrade. 보편적인 구현. 재시도가 많아서 속도도 느림)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보안강도로 볼 때 TLS1.2 » TLS1.1 &amp;gt; TLS1.0 »&amp;gt; SSLv3 순이 된다. 따라서 가능하면 TLS1.2로 연결하는 것이 보안상 유리하다. 이는 반대로 SSLv3로 연결되는 세션은 굉장이 취약하다는 것이다. SSLv3의 취약성 POODLE이 2014년 발표되어 SSLv3는 보안성을 상실하였다. 그러면 공격자 입장에서 어떻게 공격할 수 있을까?&lt;/p&gt;

&lt;p&gt;많은 브라우저들의 insecure downgrade를 이용하는 것이다. 프로토콜 때문에 전화가 끊겼는지 옆에서 누가 수화기를 놓았는지 브라우저는 알기가 어렵기 때문에 전화가 끊기기만 하면 낮은 프로토콜로 다시 전화를 건다. 공격자 공격대상 옆에서 기다리다가 TLS1.2, 1.1, 1.0으로 전화를 걸때마다 전화를 끊어주면, 두 사람은 결국 SSLv3로 전화를 연결하게 되고, 그 때 유유히 엿들을 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;그래서 여러 대처가 있었다. 대부분의 브라우저는 SSLv3 지원을 중단하였고, insecure downgrade메카니즘을 꺼버렸다. POODLE 사단을 겪은 서버들이 secure downgrade를 제대로 지원하겠지라고 기대하면서.&lt;/p&gt;

&lt;p&gt;하지만 역사는 반복된다고 하였다. 많은 서버들이 “TLS1.3으로 하자”요청에 대해서 “아니 대신 TLS1.2로 하자”라는 답을 보내지 않고 전화를 끊어버리는 것이다. TLS1.3의 세션 장애율이 3%에 육박한다는 결과가 보고되었다. 해결을 위해 다시 insecure downgrade를 도입한다면 보안성 및 속도 향상을 기치로 내건 TLS1.3이 의미가 완전히 없어진다.&lt;/p&gt;

&lt;p&gt;울며 겨자먹기로 제안된 것이 extension을 이용하는 것이다. “나 TLS1.2야. 하지만 사실은 TLS1.3이야”라고 요청하면 TLS1.3을 지원하지 않은 서버들은 TLS1.2로 응답하고, 지원하는 서버들은 TLS1.3으로 응답하는 것이다[TLS1.3 draft16, September 2016]. 이 방식으로 진행하면 대부분의 서버들과의 통신 문제가 사라졌다.&lt;/p&gt;

&lt;p&gt;그래서 2017년 2월에 크롬과 파이어폭스가 TLS1.3을 켰다. 그런데 gmail서비스시에&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TLS1.2로는 1.7%장애&lt;/li&gt;
  &lt;li&gt;TLS1.3으로는 7.7%장애&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;라는 결과가 나타났다. 조사결과 SSL 미들박스들이 충돌을 일으키는 것으로 나타났다. 대표적인 것이 Bluecoat 6.5 proxy이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2017/12/image1-1.png&quot; alt=&quot;Bluecoat 6.5 proxy broke TLS1.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;미들박스 제조사를 비난할 수만도 없는게, 근 20년간 있었던 인프라 프로토콜의 변경인 것이기 때문이다. TLS1.0은 1999년에 발표되었다. 20년이면 강산도 변하고, 그 시간동안 변하지 않는다면 버그도 표준이 되는 시간이다.&lt;/p&gt;

&lt;p&gt;2017년 11월 싱가포르 IETF미팅에서 제시된 해결책은 다음과 같다&lt;/p&gt;

&lt;p&gt;필요없다고 삭제해버린 프로토콜 파트를 다시 되살린다
TLS1.3을 최대한 TLS1.2와 유사하게 만든다.
이러한 노력으로 인해 Chrome과 Firefox에서 다음과 같이 호환성을 올릴 수 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TLS1.2 - 1.4%장애&lt;/li&gt;
  &lt;li&gt;TLS1.3 Experimental (PR1091 on github) - 1.2% 장애&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 결과는 [TLS1.3 draft 22, November 2017] 에 반영되었다.&lt;/p&gt;

&lt;p&gt;TLS1.3의 보급이 머지 않았다.&lt;/p&gt;

&lt;p&gt;마지막으로 미들박스를 만드는 분들은 Cloudflare에서 제공하는 TLS1.3 미들박스 호환성 테스트를 사용해보는 것을 추천한다. &lt;a href=&quot;https://tls13.mitm.watch/&quot;&gt;https://tls13.mitm.watch/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Dec 2017 00:15:00 +0900</pubDate>
        <link>http://cwyang.github.io/2017/12/30/why-tls-1-3-isnt-in-browsers.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2017/12/30/why-tls-1-3-isnt-in-browsers.html</guid>
        
        <category>blog</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>금주 연차입니다.</title>
        <description>&lt;p&gt;금주 연차를 내고 집에서 쉬고 있습니다.
몸살난 주부의 역할을 체험하고 있으니, 이 옷이 내 몸에 딱 맞는듯합니다.
이틀째인데 아내에게 벌써 한 소리 듣고 있습니다.&lt;/p&gt;

&lt;p&gt;글을 쓸 준비를 하였습니다.
지킬 세팅은 &lt;a href=&quot;https://subicura.com&quot;&gt;subicura.com&lt;/a&gt; 에서 가져왔습니다.
이 분 글을 읽고 나도 무엇인가 쓰고 싶어졌습니다.&lt;/p&gt;

&lt;p&gt;사실 쓰고 싶은 것은 기술 이야기가 아닌데,
그래도 일단 쓰기 쉬운 기술 이야기를 써 보겠습니다.&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Jul 2017 19:57:00 +0900</pubDate>
        <link>http://cwyang.github.io/2017/07/04/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2017/07/04/welcome-to-jekyll.html</guid>
        
        <category>blog</category>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
