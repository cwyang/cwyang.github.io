<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>양철웅의 DX 이야기</title>
    <description>short essays on DX, AI, and cloud
</description>
    <link>http://cwyang.github.io/</link>
    <atom:link href="http://cwyang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 21 Jan 2021 13:43:07 +0900</pubDate>
    <lastBuildDate>Thu, 21 Jan 2021 13:43:07 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>도커허브 이미지 풀 제약을 하버로 해결하기</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이미지 다운이 막혔어요. 도커허브 미워요.&lt;/li&gt;
  &lt;li&gt;하버 짱이에요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커허브에서-무턱대고-이미지를-당기다보면-에러가-난다&quot;&gt;도커허브에서 무턱대고 이미지를 당기다보면 에러가 난다.&lt;/h2&gt;

&lt;p&gt;도커허브에서 무료사용자들에 대해 pul rate limit를 부과하기 시작했다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ip별 6시간에 100번&lt;/li&gt;
  &lt;li&gt;무료사용자 id하나에 대해 6시간에 200번&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;연구소 기계들이 NAT아래에 있다보니 이미지 몇개 당겨오다보면 금방 한계에 부딪히게 되고 만다. 쿠버네티스 파드가 뜨지 않는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME             READY   STATUS             RESTARTS   AGE
pod/test         2/3     ImagePullBackOff   0          11m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그를 보면 아래와 같이 도커허브에서 알려주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Too Many Requests&lt;/code&gt; 메세지가 보인다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Normal   Pulling    7m4s (x3 over 8m22s)    kubelet   Pulling image &quot;alpine:latest&quot;
Warning  Failed     6m50s (x2 over 8m8s)    kubelet   Failed to pull image &quot;alpine:latest&quot;: rpc error: code = Unknown desc = failed to pull and unpack image &quot;docker.io/library/alpine:latest&quot;: failed to copy: httpReaderSeeker: failed open: unexpected status code https://registry-1.docker.io/v2/library/alpine/manifests/sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378: 
  429 Too Many Requests - Server message: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit
Warning  Failed     6m50s (x3 over 8m8s)    kubelet   Error: ErrImagePull
Warning  Failed     3m23s (x12 over 7m18s)  kubelet   Error: ImagePullBackOff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 상황을 타개하기 위해 이미지 레지스트리 서버인 &lt;a href=&quot;https://goharbor.io/&quot;&gt;Harbor&lt;/a&gt;를 설치하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goharbor/harbor/releases&quot;&gt;다운로드 페이지&lt;/a&gt;에서 인스톨러를 다운받은 이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;harbor.yml.tmpl&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;harbor.yml&lt;/code&gt;로 바꾼후 안의 내용을 보고 수정한다. TCP port와 SSL인증서 값을 설정한 후 설치하면 바로 구동된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
[cwyang@jupiter harbor]$ sudo ./install.sh
[Step 0]: checking if docker is installed ...
Note: docker version: 19.03.6
...
Creating redis ...
Creating harbor-core ...
Creating nginx ...
Creating harbor-jobservice ...
✔ ----Harbor has been installed and started successfully.----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;웹브라우저로 접속하고, admin password를 바꾼 후, proxy cache를 설정해보자.
하버 프락시 캐시를 설정하고 사용자가 프락시 캐시를 요청하면 하버는 이미지를 origin에서 받아서 제공하는 한편 그를 저장해 두고 다음부터는 저장된 이미지를 제공한다. 이미지 요청이 오면 origin 서버로 확인을 하게 되는데 다음과 같이 4가지 경우를 구분하여 처리한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이미지가 안바뀜 → 저장된 이미지 제공&lt;/li&gt;
  &lt;li&gt;이미지가 바뀜 → 새 이미지를 다운받아 제공&lt;/li&gt;
  &lt;li&gt;origin에 연결안됨 → 저장된 이미지 제공&lt;/li&gt;
  &lt;li&gt;이미지가 삭제됨 → 이미지 제공하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하버가 매 요청마다 origin에 확인을 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 요청을 이용하는데,
도커허브 ratelimiter가 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;는 (현재까지는) 무제한 허용을 해 주기 때문에 안심하고 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;하버-설정하기&quot;&gt;하버 설정하기&lt;/h2&gt;

&lt;p&gt;레지스트리 메뉴에서 새 엔드포인트를 생성한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor01.png&quot; alt=&quot;엔드포인트 생성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음에는 프로젝트 메뉴에서 프락시 캐시 타입의 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor02.png&quot; alt=&quot;프락시 캐시 프로직트  생성&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;설정된-주소로-컨테이너-이미지-가져오기&quot;&gt;설정된 주소로 컨테이너 이미지 가져오기&lt;/h2&gt;
&lt;p&gt;이제 됐다. 사용하기 위해서는 이미지 URL 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;harbor_server_name&amp;gt;/&amp;lt;proxy_project_name&amp;gt;/&lt;/code&gt;을 붙여주어야한다. 그리고 toplevel 이미지를 당기려면 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; path를 붙여준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;​​# pull alpine:latest
​​cwyang@cwyang ~ $ docker pull jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​latest: Pulling from proxy/library/alpine
​​596ba82af5aa: Pull complete
​​Digest: sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378
​​Status: Downloaded newer image for jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​jupiter.soosanint.com:4433/proxy/library/alpine:latest
​​
​​#pull networkservicemesh/test-common:v0.2.0
​​cwyang@cwyang ~ $ docker pull jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​v0.2.0: Pulling from proxy/networkservicemesh/test-common
​​89d9c30c1d48: Pull complete
​​139dffae8422: Pull complete
​​Digest: sha256:6ba5743738a0244d9c7f69ff2f2ac1fbd7598eb8ff2f9b40ddba8c533d918b21
​​Status: Downloaded newer image for jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​jupiter.soosanint.com:4433/proxy/networkservicemesh/test-common:v0.2.0
​​cwyang@cwyang ~ $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 콘솔을 확인하면 아래와 같이 캐시된 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/harbor/harbor03.png&quot; alt=&quot;저장된 컨테이너 이미지들&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 캐시된 이미지는 7일간 유효하다. 설치시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;--with-trivy&lt;/code&gt; 옵션을 주면 저장 이미지에 대해서 취약점 스캐닝을 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;trivy&lt;/code&gt;가 같이 설치된다.&lt;/p&gt;

&lt;p&gt;이제 파드 매니페스트 파일에서 이미지 레지스트리주소를 하버 주소로 바꾸고 사용하도록 하자.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 15:02:41 +0900</pubDate>
        <link>http://cwyang.github.io/2021/01/20/using-harbor-to-avoid-dockerhub-pull-ratelimit.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2021/01/20/using-harbor-to-avoid-dockerhub-pull-ratelimit.html</guid>
        
        <category>blog</category>
        
        <category>docker</category>
        
        <category>dockerhub</category>
        
        <category>harbor</category>
        
        <category>container</category>
        
        <category>k8s</category>
        
        <category>kubernetes</category>
        
        
      </item>
    
      <item>
        <title>맥OS 앱 코드사인 및 공증하기</title>
        <description>&lt;p&gt;윈도우즈와 마찬가지로 맥 생태계에서도 인터넷으로 다운 받는 앱에 대해서는 보안검증이 이루어진다.
앱을 누가 만들었는지를 알 수 없거나 악성 코드 체크가 이루어지지 않는 경우 아래 그림과 같이
사용자에게 물어보거나, 설정에 따라서 실행을 아예 막아버리기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/osx_gatekeeper_bad.png&quot; alt=&quot;앱이 의심스러워 실행을 금지합니다!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 앱의 배포를 위해서는 코드사인과 공증 작업이 필요하다. 
Xcode앱인 경우 Xcode에서 대부분 알아서 해 줄 것인데, 수작업으로 작업을 진행해야 할 때도 있다.
당신(이라고 쓰고 미래의 나 라고 읽자)은 수작업으로 진행해야 하기 때문에 이 글을
읽고 있으리라.
자세한 내용은 아래 관련정보에서 얻을 수 있지만, 미래의 나에게 요약하는 의미로
중요한 것을 별도로 정리한다.
&lt;a href=&quot;https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution&quot;&gt;관련정보&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;코드사인-code-sign&quot;&gt;코드사인 (Code-sign)&lt;/h1&gt;

&lt;p&gt;앱에 제작자를 새겨 넣는 작업이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;맥 개발자 프로그램이 필요하다. 가입한다. (유료. 연간 $99)&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/ 에 방문하여 Developer-ID 인증서를 만든다.
만든 인증서는 다운받아 컴의 Keychain access에 저장한다.
Keychain access에서 해당 인증서의 Private-key를 찾을 수 없다면 뭔가 잘못된 것.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드사인을 한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codesign --options=runtime -s 'Developer ID Application' MyApp.app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드사인이 잘 안된다면 앱의 모든 화일을 대상으로 extended attribute를 지우고 다시 시도한다.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find MyApp.app | xargs xattr -xc&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;공증-notarization&quot;&gt;공증 (Notarization)&lt;/h1&gt;

&lt;p&gt;코드사인된 앱을 애플에 보내서 기본적인 검사를 진행하고 OK도장을 받는 작업이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Xcode command toolset을 설치한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun altool&lt;/code&gt; 명령어가 성공해야한다.&lt;/li&gt;
  &lt;li&gt;다음 명령어를 이용하여 공증을 시도한다. 잘 되었으면 UUID가 반환된다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% xcrun altool --notarize-app
            --primary-bundle-id &quot;com.example.ote.zip&quot;
            --username &quot;AC_USERNAME&quot;
            --password &quot;@keychain:AC_PASSWORD&quot;
            --asc-provider &amp;lt;ProviderShortname&amp;gt;
            --file OvernightTextEditor_11.6.8.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;username: 개발자 ID&lt;/li&gt;
      &lt;li&gt;password: 개발자 ID 비밀번호가 &lt;strong&gt;아니고&lt;/strong&gt; 앱개발 전용 비밀번호이다. &lt;a href=&quot;https://appleid.apple.com&quot;&gt;애플아이디 설정페이지&lt;/a&gt; 에서 지정하는 앱개발용 암호이다.&lt;/li&gt;
      &lt;li&gt;asc-provider: &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun altool --list-providers -u &quot;AC_USERNAME&quot; -p &quot;@keychain:AC_PASSWORD&quot;&lt;/code&gt;을 이용하여 얻어낸 provider id를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공증 상태를 체크하기 위해서는 아래 명령어를 사용한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% xcrun altool --notarization-history 0 -u &quot;AC_USERNAME&quot; \
 -p &quot;@keychain:AC_PASSWORD&quot;
% xcrun altool --notarization-info \
 2EFE2717-52EF-43A5-96DC-0797E4CA1041 -u &quot;AC_USERNAME&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;공증이 잘 끝났으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun stapler staple &quot;Overnight TextEditor.app&quot;&lt;/code&gt; 명령어를 이용하여 공증 결과를 화일에 첨부한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 해당 파일을 웹 서버에 올리고 다운을 받아보자. 다음과 같이 실행할 것인지 물어본다면 성공!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/osx_gatekeeper_ok.png&quot; alt=&quot;인터넷에서 받은 앱을 실행하시겠어요?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하얗게 불타버린 오늘 하루였다. 커피한잔 사주실분!!!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;cwyang&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000000&quot; data-font-color=&quot;#000000&quot; data-coffee-color=&quot;#ffffff&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2020 18:12:00 +0900</pubDate>
        <link>http://cwyang.github.io/2020/12/09/osx-codesign-notarization.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2020/12/09/osx-codesign-notarization.html</guid>
        
        <category>blog</category>
        
        <category>macos</category>
        
        <category>osx</category>
        
        <category>code-sign</category>
        
        <category>notarization</category>
        
        
      </item>
    
      <item>
        <title>클라우드 퍼스트 단상</title>
        <description>&lt;p&gt;클라우드 퍼스트 단상&lt;/p&gt;

&lt;p&gt;코로나로 인해 점심식사를 배달주문하여 먹고 있다.
배달의 민족덕분에 여러가지 메뉴를 질리지 않게 돌려가면서 먹고 있다. 예전같았으면 계속 중국집에 계속 배달했겠지. 예전보다 음식값이 비싸다고 느끼지만 그게  배달의 민족때문인지 물가가 올라서 그런건지는 잘 모르겠다. 소비자 입장에서 배달의 민족은 좋은 서비스 맞다.&lt;/p&gt;

&lt;p&gt;세상에 공짜가 어디있겠나. 누군가는 손해를 봐야한다. 경쟁력이 없는 음식점은 안간다. 코로나로 안가고 맛이 덜하여 주문을 안한다. 저 멀리 위치한 맛집에 대해 그냥 장사잘되서 좋겠구나 라고 생각하고 있었지만 이제 그 집으로 손님들이 다 가버렸다. 높은 수수료는 사회 문제까지 되고 있다.&lt;/p&gt;

&lt;p&gt;아무도 내 편을 들어주는 사람이 없다. 적기조례, 자동차가 다니는 세상에 말은 사라지는게 당연하다고 한다. 손님들은 편하고 선택권이 많아지니 이런 시대의 흐름을 좋아한다. 좀 비싸지는건 당연하다고 생각하며 돈을 지불하는데 돈은 플랫폼업체들이 가지고 간다.&lt;/p&gt;

&lt;p&gt;미국은 이미 10년전에 클라우드 퍼스트 전략을 발표했다. 우리 정부도 클라우드 퍼스트. 많은 기업들도 디지털 트랜스포메이션이라는 기치 아래 클라우드로 가고 있다. 클라우드로 가면 탄력적인 운영으로 인해 IT 비용은 줄어들고 자원이 효율화된다. 클라우드가 아닐때  100으로 운영되고 있었던 것이 클라우드로 가면 10으로 줄어들 수 있겠다. 그런데.. 90%의 효율화 달성은 90%의 시장 감소를 수반하지 않을까? 감소된 시장이 다른 곳에서 그만큼 생겨날까? 생겨난다면 누가 그것을 가지고 가게 될까…&lt;/p&gt;

&lt;p&gt;산업혁명 후 마차를 몰던 마부들이 마주한 세계는 고도의 산업발전시기였다. 클라우드 퍼스트로 인해 변화될 시장에서 기존의 IT기업들이 마주할 현실은 무엇일까? 기회의 땅이 기다리고 있을까, 아니면 메마른 땅이 기다리고 있을까.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2020 20:17:00 +0900</pubDate>
        <link>http://cwyang.github.io/2020/12/05/what-does-cloud-computing-bring-to-us.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2020/12/05/what-does-cloud-computing-bring-to-us.html</guid>
        
        <category>blog</category>
        
        <category>cloud-first</category>
        
        <category>politics</category>
        
        
      </item>
    
      <item>
        <title>한 세션을 여러번 정책 라우팅하니까 NAT가 안돼요</title>
        <description>&lt;h1 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h1&gt;

&lt;p&gt;같은 5-tuple의 패킷을 정책 라우팅으로 iptables를 여러번 태운다면
conntrack이 개입하는 nat테이블의 경우 zone으로 분리를 해줘야해요.&lt;/p&gt;

&lt;h1 id=&quot;문제&quot;&gt;문제&lt;/h1&gt;

&lt;p&gt;호스트 머신에서 투명 프락시 네트워크를 구성하려고 합니다.
실제 클라이언트와 프록시는 컨테이너가 될 것이지만, 실험을 위해서
리눅스 네임스페이스로 구별되는 환경을 구성하였습니다.
클라이언트에서 인터넷으로의 트래픽을 프락시 네임스페이스로 유도하기 위해서
정책 라우팅을 사용하였습니다.&lt;/p&gt;

&lt;p&gt;I’m trying to setup transparent proxying networks on my host.
Real Client and Proxy targets are containters but in this experiment I use netns (network namespace) separated envinroment.
To redirect client traffic to proxy transparently, I use policy routing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client (C)         Proxy (P)
10.10.1.1/24      10.10.2.1/24
    veth0             veth0
     |                 |
  veth pair         veth pair
     |                 |
 -----------(HOST)--------------
client-veth0       proxy-veth0
10.10.1.2/24      10.10.2.2/24
     |                 |            172.16.202.30
     +-----------------+-------------- enp4s0 ---- INTERNET
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정책 라우팅은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip rule&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip route&lt;/code&gt;, 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;를 사용하여 아래와 같이
설정하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Client-&amp;gt;Proxy]
ip rule:  from 10.10.1.0/24 iif client-veth0 lookup 100
ip route: (100) default via 10.10.2.1 dev proxy-veth0
[Proxy-&amp;gt;Internet]
ip route: (master) default via 172.16.202.1 dev enp4s0 proto static metric 100
iptables: -t nat -A POSTROUTING -s 10.10.10.1/32 -o enp4s0 -j MASQUERADE
[Internet-&amp;gt;Proxy]
ip rule:  from all to 10.10.1.0/24 iif enp4s0 lookup 100
ip route: (100) default via 10.10.2.1 dev proxy-veth0
[Proxy-&amp;gt;Client]
ip rule:  from all to 10.10.1.0/24 iif proxy-veth0 lookup 101
ip route: (101) default via 10.10.1.1 dev client-veth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문제는 클라이언트에서 인터넷을 접속할 때 NAT가 이루어지지 않는다는 것입니다.
클라이언트에서 8.8.8.8으로 ping을 할 경우 인터넷 구간으로 10.10.1.1 소스 IP가
그대로 출력됩니다.&lt;/p&gt;

&lt;p&gt;이 설정의 특이한 점이라면 정책 라우팅으로 같은 5-tuple 패킷을 iptables에
여러번 보내는 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;iptales -L -nv&lt;/code&gt;로 패킷 카운트를 보면 MASQUERADE
룰 말고는 다 매치가 되는데 MASQUERADE만 매치가 안되는 이유는 무엇인가요?&lt;/p&gt;

&lt;p&gt;Problem is, When I ping 8.8.8.8 from Client, within client netns, source ip masquerading does not happen. iptables masquerade rule does not match and defaults to ACCEPT . I expect that tcpdump on enp4s0 shows 172.16.202.30 –&amp;gt; 8.8.8.8, but it shows 10.10.1.1 –&amp;gt; 8.8.8.8, without source IP masquerading. Why doesn’t NAT happen?&lt;/p&gt;

&lt;h1 id=&quot;해결&quot;&gt;해결&lt;/h1&gt;

&lt;p&gt;conntrack 때문입니다.&lt;/p&gt;

&lt;p&gt;nat테이블은 컨트랙의 NEW 상태 패킷만을 처리합니다.
첫번째 iptables nat테이블 처리시 NEW상태가 되기 때문에
두번째 iptables에 들어왔을때 매치가 되지 않는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/370152/&quot;&gt;Conntrack zone&lt;/a&gt;을 이용하여
conntrack의 key를 5-tuple에서 zone을 포함한 6-tuple로 만들어 주어 해결할 수 있습니다.
zone이 다르면 새로운 연결이라고 판단하여 각기 nat테이블 처리를 하게되는 것입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -t raw -A PREROUTING -i client-veth0 -j CT --zone 1
iptables -t raw -A PREROUTING -i proxy-veth0 -d 10.10.1.0/24 -j CT --zone 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s because conntrack gets involved.&lt;/p&gt;

&lt;p&gt;Iptables nat table handles the packet with NEW state.
When a packet traverses nat table, conntrack adds a NEW entry.
The packet with same 5-tuple enters nat table again,
it is matched against conntrack database and skipped processing
since the packet is on conntrack database&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/370152/&quot;&gt;Conntrack zone&lt;/a&gt; can be used to 
make a packet 6-tuple, including zone,  and be processed at nat table multiple times.&lt;/p&gt;

&lt;h1 id=&quot;코드&quot;&gt;코드&lt;/h1&gt;

&lt;p&gt;conntrack zone을 분리한 펄 코드입니다.&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dryrun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iptables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nic_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;veth0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run_cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$cmd\n&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dryrun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$cmd &amp;gt; /dev/null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;  Error: ($result) $cmd \n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;iptables_add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$iptables -D $target $line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$iptables -A $target $line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$ip netns exec $ns $ip&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$cmd $line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_ns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nsaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hostaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hostaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netns del $target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link del $target-$nic_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# create namespace&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netns add $target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# create a veth pair&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link add $target-$nic_name type veth peer name $nic_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link set $nic_name netns $target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# address setup&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addr add $hostaddr dev $target-$nic_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link set $target-$nic_name up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# address setup on target namespace&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;addr add $nsaddr dev $nic_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;link set $nic_name up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;link set lo up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;route add default via $host dev $nic_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;make_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;client&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.1.1/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.1.2/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;make_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;10.10.2.1/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.2.2/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;route_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10.10.10.0/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;route_setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$net_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.1.0/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$net_proxy&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.2.0/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gw_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gw_proxy&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.10.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nic_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;client-veth0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nic_proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proxy-veth0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nic_internet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enp4s0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# debug&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;iptables_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PREROUTING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-t raw -j TRACE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# we need to do following things like to enable netfliter logging&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# sysctl -w net.netfilter.nf_log_all_netns=1&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# sysctl -w &quot;net.netfilter.nf_log.2&quot;=nf_log_ipv4&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# flush&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;route flush table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;route flush table 101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# OUTBOUND: src --&amp;gt; proxy&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule del from $net_client iif $nic_client prio 100 table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule add from $net_client iif $nic_client prio 100 table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# INBOUND: internet --&amp;gt; proxy&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule del to $net_client iif $nic_internet prio 102 table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule add to $net_client iif $nic_internet prio 102 table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# RT: route to proxy&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;route add default via $gw_proxy dev $nic_proxy table 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# OUTBOUND: proxy --&amp;gt; internet&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# proxy --&amp;gt; default route w/ masquerade&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;iptables_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POSTROUTING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-t nat -s $net_client ! -d $net_client -o $nic_internet -j MASQUERADE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# INBOUND: proxy --&amp;gt; client&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule del to $net_client iif $nic_proxy prio 101 table 101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rule add to $net_client iif $nic_proxy prio 101 table 101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# RT: route to client&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;route add default via $gw_client dev $nic_client table 101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# conntrack zone split&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# zone 0: default zone, generic host traffic along proxy and Internet&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# zone 1: client &amp;lt;-&amp;gt; proxy traffic&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;iptables_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PREROUTING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-t raw -i $nic_client -j CT --zone 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;iptables_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PREROUTING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-t raw -i $nic_proxy -d $net_client -j CT --zone 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 18 Apr 2020 09:15:00 +0900</pubDate>
        <link>http://cwyang.github.io/2020/04/18/why-iptables-nat-not-working-with-multiple-policy-routing.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2020/04/18/why-iptables-nat-not-working-with-multiple-policy-routing.html</guid>
        
        <category>blog</category>
        
        <category>policy routing</category>
        
        <category>NAT</category>
        
        <category>iptables</category>
        
        <category>linux</category>
        
        <category>transparenty proxy</category>
        
        <category>perl</category>
        
        
      </item>
    
      <item>
        <title>춘추의 설계자 관중</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“춘추전국 이야기 1: 춘추의 설계자 관중”을 읽고.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FAANG.&lt;/p&gt;

&lt;p&gt;Facebook, Apple/Amazon, Netflix, Google로 대표되는 현 IT세계의 지배자들이다. 아니 IT로 국한하는 것이 좀 잘못된 것 같다. 현 세계 비즈니스의 빅 플레이어들이다. 4차 산업 혁명의 최 전선에서 달려가고 있으며, 세계 발전을 리드하고, 무수히 많은 가치를 창출하는 플레이어들. 그들과의 경쟁에서는 살아남을 수 없으며, 그들이 취하지 않는 작은 시장, 그리고 그들이 제공하는 플랫폼에서 영유할 수 있는 시장만을 노려야 하는 것이 나머지 기업들의 상황이다. 그러면 그  나머지 기업들은 어떻게 살아남아야 하는가.&lt;/p&gt;

&lt;p&gt;FAANG을 직접적으로 다룬 책들 “플랫폼 제국의 미래”, “구글 스토리”, “비커밍 페이스북”등과 같은 책들이 이야기하는 것은 그들의 “기술개발”, “투자자”, “불굴의 집념”, 그리고 “행운”이라는 요소들이었다. 토끼가 앞서가는데 잠도 안자, 더 좋은 밥을 먹어, 지구력도 더 좋아. 운까지 따라. 거북이는 토끼를 영원히 이길 수 없을까?&lt;/p&gt;

&lt;p&gt;기원전 8세기~기원전2세기에 걸친 중국의 춘추전국시대에서 그 답을 찾고자 한다.
중국 역사상 가장 오랜동안인 800년간 유지되었던 주나라. 주나라도 왕권이 바뀜에 따라 쇠약해지고 그와 함께 나타난 춘추오패(제, 진, 초, 오, 월). 마이크로소프트(주나라)의 쇠약과 함께 나타난 FAANG과 비슷하다. 사티아 나델라가 MS를 다시 추스려 부흥시키기 전까지 MS는 망한다고 여겨지고 있었다. 제왕의 자리를 차지하고 있었던 MS가 말이다. 그와 마찬가지로 지금 보면 영원할 것 같은 FAANG도 언젠가는 쇠약해지고 다른 기업이 그 위치를 차지할 것이다. 춘추오패의 뒤를 이어 전국 칠웅이 나타난 것 처럼. 그리고 그 뒤로 진, 한, 등 계속 역사가 되풀이 되듯.&lt;/p&gt;

&lt;p&gt;춘추오패의 첫번째 패자인 제 환공은 관중을 재상으로 삼아 나라를 강하게 만들어 유명무실해진 동주 왕실을 대신해 회맹을 거행하였다. 제 환공은 자신을 죽이려고 까지 했던 관중을 등용하였고 관중의 개혁을 받아들인 훌륭한 군주이다. 관중은 인치와 법치를 중시하였다. 즉 인재 제일을 표방하였으며, 법을 명확하게 하여 백성들이 나라에는 규칙이 명확히  집행되는 것을 알게 하였다. 백성들이 잘 살아야 왕실이 잘 살 수 있다는 이념하에 생업기반을 잡아주어 경제를 부흥시켰다. 사농공상의 거주지를 분할하여 산업을 특화시키고,  행정과 군사편제를 결합시켜 군사력을 증강시켰으며, 행정조직별로 책임과 권한을 분할하였다. 이렇게 긴 시간을 보내면서 패자로서의 역량이 생긴 것이다.&lt;/p&gt;

&lt;p&gt;노동 생산성 향상을 위하여 제시한 관중의 분업은 서구의 컨베이어 벨트형 분업이 아니고, 하나의 공정을 지배하는 분업이라는 점이 인상깊다. 생산을 편안하고 천직으로 받아들이게 하는 분업이다. 산업사회의 분업과는 다른 것이다. 또한 이들을 모여서 거주하게 하여 상승 효과를 유도한 것에도 감탄하였다. 군사간의 사기와 친밀도를 강병의 요체라고 파악하여 행정과 군사편제를 결합한 것도 좋았다. 즉 같은 부대는 같은 마을에서 친하게 지내온 사람들인 것이다. “연대의식으로 뭉친 군대는 강하다”는 것.&lt;/p&gt;

&lt;p&gt;맡은 바 업무를 편안하고 천직으로 받아들일 수 있는 환경. 오랜 기간 합을 맞춘 사람들이 이루어내는 시너지. 관중의 이야기를 읽으면서 이를 생각해 보았다.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jun 2019 14:30:00 +0900</pubDate>
        <link>http://cwyang.github.io/2019/06/12/guan_zhong.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2019/06/12/guan_zhong.html</guid>
        
        <category>blog</category>
        
        <category>book</category>
        
        <category>history</category>
        
        
      </item>
    
      <item>
        <title>OVS, Docker, CentOS7 환경 만들기</title>
        <description>&lt;h1 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h1&gt;

&lt;p&gt;centos7기반의 ovs와 docker가 머신이 당분간 계속 필요할 것 같아서,  vagrant를 이용하여 VM을  빌드해보기로 하였습니다.
vagrant는 가상 머신 설치를 도와주는 프로그램입니다. vagrant가 없었던 시절에는 VM에 직접 인스톨 한 후 VM 이미지를 복사해 두어 재 사용하는 방법을 사용했었습니다.
vagrant에서는 기본 이미지 (box라고 합니다.)를 제공하면서, 그 위에 설치 프로그램 형상을 사용자가 지정할 수 있도록 합니다. 쓰면 매우 편한겁니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
Linux cwyang 4.10.0-42-generic &lt;span class=&quot;c&quot;&gt;#46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install virtualbox vagrant&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;ssl-접속환경-확인&quot;&gt;SSL 접속환경 확인&lt;/h1&gt;

&lt;p&gt;다음 ssl domain들이 인증서 피닝을 요구합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vagrantcloud.com&lt;/li&gt;
  &lt;li&gt;cbs.centos.org&lt;/li&gt;
  &lt;li&gt;yum.dockerproject.org&lt;/li&gt;
  &lt;li&gt;raw.githubusercontent.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;회사안에서 SSL 복호화 장비가 있는 경우 회사 인증서를 VM에 신뢰할 수 있는 인증서로 심거나, SSL 복호화 장비에서 위의 사이트들에 대하여 복호화를 바이패스 하도록 설정합니다.&lt;/p&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;

&lt;p&gt;github에 설치 스크립트를 작업해 둔 분이 있습니다. (&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/tree/master/ovs-vagrant&quot;&gt;링크&lt;/a&gt;)그 파일들을 이용해서 설치해 보았습니다. 감사합니다.&lt;/p&gt;

&lt;p&gt;아래 두 파일을 저장한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt;  명령어를 실행하면 수 분 안에 centos/7을 다운 받고 dependency package를 설치하고 ovs를 설치하고 docker를 설치해줍니다. 좋은 세상입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/blob/master/ovs-vagrant/Vagrantfile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joatmon08/vagrantfiles/blob/master/ovs-vagrant/bootstrap.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;설치-확인&quot;&gt;설치 확인&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant ssh
Last login: Fri Oct 12 01:13:18 2018 from 10.0.2.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;호스트의 id_rsa.pub를 VM의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh/authorized_keys&lt;/code&gt;에 등록하면 직접 ssh도 가능합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh vagrant@127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2222
Last login: Fri Oct 12 01:22:25 2018 from 10.0.2.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;도커와 OvS를 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status openvswitch docker
● openvswitch.service - Open vSwitch
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/lib/systemd/system/openvswitch.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exited&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2018-10-12 01:05:18 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 21min ago
 Main PID: 25616 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited, &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0/SUCCESS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 0
   Memory: 0B
   CGroup: /system.slice/openvswitch.service

● docker.service - Docker Application Container Engine
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/lib/systemd/system/docker.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2018-10-12 01:05:37 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 21min ago
     Docs: https://docs.docker.com
 Main PID: 25686 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dockerd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 16
   Memory: 16.0M
   CGroup: /system.slice/docker.service
           ├─25686 /usr/bin/dockerd
           └─25689 docker-containerd &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; unix:///var/run/docker/libcontainerd/docker-containerd.sock &lt;span class=&quot;nt&quot;&gt;--metrics-interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 -...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;도커 실행을 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;그룹에 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant&lt;/code&gt; 사용자를 등록합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker vagrant&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;two-containers-w-ovs-bridge&quot;&gt;Two containers w/ OVS bridge&lt;/h1&gt;
&lt;h2 id=&quot;구성&quot;&gt;구성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;moby1: eth1 192.168.0.1/24
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby2: eth1 192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ovs-브릿지-생성&quot;&gt;OVS 브릿지 생성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;root@localhost vagrant]# ovs-vsctl add-br ovs-br1
root@localhost vagrant]# ovs-vsctl show
94185d0-937e-49bf-a0a4-69ca5027718b
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;2.9.0&quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너-생성후-ovs-bridge에-연결&quot;&gt;컨테이너 생성후 ovs-bridge에 연결&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby1 ubuntu
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 apt-get update
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 apt-get install iproute2 iputils-ping
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1/24

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby2 ubuntu
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get update
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get install iproute2 iputils-ping
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth2 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2/24

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby1 ip address
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
...
21: eth0@if22: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default
...
23: eth1@if24: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether b2:bf:61:25:7e:f8 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 192.168.0.1/24 scope global eth1
       valid_lft forever preferred_lft forever&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너간-연결-확인&quot;&gt;컨테이너간 연결 확인&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl list-ports ovs-br1
6b9045d2be344_l
90cd4018819e4_l
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 ping 192.168.0.2 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.2: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.037 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.2 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.037/0.037/0.037/0.000 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 ping 192.168.0.1 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.1: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.037 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.1 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.037/0.037/0.037/0.000 ms&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;v&lt;/p&gt;
&lt;h1 id=&quot;three-containers-w-ovs-bridge&quot;&gt;Three-containers w/ OVS bridge&lt;/h1&gt;
&lt;h2 id=&quot;구성-1&quot;&gt;구성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;moby1: eth1 192.168.0.1/24
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby2: eth1 - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;moby2-bridge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - eth2
  | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ovs-br2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
moby3: eth1 192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ovs-브릿지-생성-1&quot;&gt;OVS 브릿지 생성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br1
vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br2
vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl show
94185d0-937e-49bf-a0a4-69ca5027718b
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br2&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   Bridge &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
       Port &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
           Interface &lt;span class=&quot;s2&quot;&gt;&quot;ovs-br1&quot;&lt;/span&gt;
               &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
   ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;2.9.0&quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너-생성후-ovs-bridge에-연결-1&quot;&gt;컨테이너 생성후 ovs-bridge에 연결&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;run.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br ovs-br2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl show

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby1 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby1 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1/24

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby2 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby2 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br1 eth1 moby2
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br2 eth2 moby2

docker run &lt;span class=&quot;nt&quot;&gt;-dit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;moby3 ubuntu
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby3 apt-get update
docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby3 apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install iproute2 iputils-ping
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-docker add-port ovs-br2 eth1 moby3 &lt;span class=&quot;nt&quot;&gt;--ipaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2/24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;host-bridge&quot;&gt;host-bridge&lt;/h2&gt;

&lt;p&gt;moby2안에서 bridge를 생성하여야 하는데, 기본적으로 NET-ADMIN capability를 가지고 있지 못하므로 아래와 같이 실패할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;root@79c82193d876:/# ip link add name moby2-bridge &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
RTNETLINK answers: Operation not permitted&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그래서 위에서 moby2는 &lt;code class=&quot;highlighter-rouge&quot;&gt;--privileged&lt;/code&gt; 옵션을 이용하여 구동하였습니다. 자 브릿지를 만들어 봅시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link add name moby2-bridge &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev moby2-bridge up
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 master moby2-bridge
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth2 master moby2-bridge

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 ip link show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: moby2-bridge: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
    link/ether 1e:d3:03:6a:8d:53 brd ff:ff:ff:ff:ff:ff
55: eth0@if56: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0
57: eth1@if58: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master moby2-bridge state UP mode DEFAULT group default qlen 1000
    link/ether 1e:d3:03:6a:8d:53 brd ff:ff:ff:ff:ff:ff link-netnsid 0
59: eth2@if60: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master moby2-bridge state UP mode DEFAULT group default qlen 1000
    link/ether 7e:a1:31:29:09:fc brd ff:ff:ff:ff:ff:ff link-netnsid 0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;컨테이너간-연결-확인-1&quot;&gt;컨테이너간 연결 확인&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 apt-get install tcpdump

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;moby1 ping 192.168.0.2 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1
PING 192.168.0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.2: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.339 ms

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 192.168.0.2 ping statistics &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.339/0.339/0.339/0.000 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ovs_3hosts]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 때 moby2에서 moby2-bridge에 대고 패킷을 뜨면 위의 연결 확인 패킷을 잡을 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vagrant@localhost ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; moby2 tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; moby2-bridge &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
tcpdump: verbose output suppressed, use &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on moby2-bridge, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 262144 bytes
05:24:36.195869 IP 192.168.0.1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.0.2: ICMP &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;request, id 344, seq 1, length 64
E..T..@.@..............L.X...0.[....G....................... &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$%&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;'()*+,-./01234567
05:24:36.195971 IP 192.168.0.2 &amp;gt; 192.168.0.1: ICMP echo reply, id 344, seq 1, length 64
E..T....@.x...........!L.X...0.[....G....................... !&quot;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$%&amp;amp;'()*+,-./01234567&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 12 Oct 2018 14:38:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/10/12/ovs-docker-centos7-environment.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/10/12/ovs-docker-centos7-environment.html</guid>
        
        <category>blog</category>
        
        <category>ovs</category>
        
        <category>docker</category>
        
        <category>centos</category>
        
        <category>vagrant</category>
        
        
      </item>
    
      <item>
        <title>Encrypted SNI</title>
        <description>&lt;p&gt;얼마전에 H2O개발자인 Kazuho Oku씨가 IETF hackerthon에서 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-esni-01&quot;&gt;암호화 SNI&lt;/a&gt; 구현을 했다는 소식을 들었습니다. 그리고 오늘 Cloudflare에서 모든 서비스에 full support를 한다고 &lt;a href=&quot;https://blog.cloudflare.com/encrypted-sni/&quot;&gt;발표를 했네요.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/esni_cloudflare.png&quot; alt=&quot;ESNI&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이제 SNI 차단은 안된다는 것이에요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정확히 말하면 SNI 차단을 막아주는 환경을 제공하는 사업자가 생겼다라는 것입니다.&lt;/p&gt;

&lt;p&gt;DNS over TLS와 함께 SSL/TLS통신을 쓰면 대부분이 암호화 통신이 되고 있었지만, 유일하게 암호화 되지 않았던 부분이 요청시의 SNI필드 &lt;code class=&quot;highlighter-rouge&quot;&gt;나 www.naver.com에 방문하고 싶어요&lt;/code&gt;와 함께 응답시의 인증서필드 &lt;code class=&quot;highlighter-rouge&quot;&gt;알았어요. 우선 www.naver.com인증서를 보낼테니 확인해보세요&lt;/code&gt;  였습니다.&lt;/p&gt;

&lt;p&gt;TLS 1.3부터는 인증서도 암호화해서 보냅니다. 그래서 진짜 남은게 요청시의  SNI 필드였는데, 그것도 저 인터넷 드래프트의 구현으로 해결한거죠. 저 인터넷 드래프트는 RFC로 등록이 될 것이라고 생각해요.&lt;/p&gt;

&lt;p&gt;DNS로 퍼블릭 키를 배포하고, 퍼블릭 키를 이용하여 DH (Diffie-Hellman)로 공유키를 만듭니다. DH를 이용하기 때문에 매 세션마다 공유키가 바뀌니까 암호화된 공유키로 원본을 특정할 수가 없구요, 퍼블릭 키를 주기적으로 바꾸게 되면 암호화 메카니즘이 완전히 안전해지는거에요.&lt;/p&gt;

&lt;p&gt;기술은 점점 더 익명화를 지향하는 쪽으로 나아가고 있는 것이 맞는데, 그게 좋은 건지 생각해보게 됩니다.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;SecureDNS, DNSSec, TLS1.3, Encrypted SNI 환경을 테스트하는 페이지를 &lt;a href=&quot;https://www.cloudflare.com/ssl/encrypted-sni/&quot;&gt;cloudflare에서 서비스하고 있습니다.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Sep 2018 09:40:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/09/24/cloudflare-does-esni.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/09/24/cloudflare-does-esni.html</guid>
        
        <category>blog</category>
        
        <category>sni</category>
        
        <category>tls</category>
        
        <category>ssl</category>
        
        <category>filtering</category>
        
        
      </item>
    
      <item>
        <title>디퍼런트 - Escaping the Competitive Herd</title>
        <description>&lt;p&gt;지난 주말에 책 한권을 읽었습니다. 경영 서적인 &lt;디퍼런트&gt; 입니다.&lt;/디퍼런트&gt;&lt;/p&gt;

&lt;p&gt;성숙된 시장에서는 소비자는 회사가 아닌 카테고리만을 기억한다는 점이 인상적이었기에 짧게 책을 소개해드릴께요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/different-cover.jpg&quot; alt=&quot;Different - by Y.M.Moon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;국문판 부제는 “넘버원을 넘어 온리원으로”이고, 영문판 부제는 “Escaping the Competitive Herd”인데, 영문판 부제가 주제를 더 정확히 설명하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;becoming-herd&quot;&gt;Becoming Herd&lt;/h2&gt;

&lt;p&gt;경쟁에 참여하게 되면 자신의 위치를 분석하여 약점을 보완하는 것이 인간의 본능이며, 이것은 기업도 마찬가지입니다. 포지셔닝 맵 분석, 시장조사등의 과정을 거쳐 모두는 비슷비슷해지게 되며 소비자는 특정 회사를 기억하기 보다는 카테고리를 기억하게 됩니다.&lt;/p&gt;

&lt;p&gt;참여자가 모두 비슷비슷해지게 되는 과잉 성숙 단계의 카테고리에서 활동하는 기업들은 제자리를 지키기 위해 엄청난 에너지를 소비하게 되는데, 기업들은 그것이 치열한 경쟁 상황에서 피할 수 없는 운명이라고 결론짓기도 합니다. 그러나 모두가 발전을 위해 달려가지만 마지막에 도달하는 곳은 공동의 파멸뿐이라는 진화의 역설이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/different-becoming-herd.jpg&quot; alt=&quot;Becoming Herd&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;escaping-herd&quot;&gt;Escaping Herd&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;다른&lt;/strong&gt; 아이디어가 &lt;strong&gt;다른&lt;/strong&gt; 세상을 지배하게 됩니다.&lt;/p&gt;

&lt;p&gt;무한 경쟁 카테고리에서 바둥거리기 보다는 살아남기 위한 세가지 접근 방법을 제안하였습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reversal 역발상&lt;br /&gt;
Feature를 단순화. Less is More&lt;/li&gt;
  &lt;li&gt;Breakaway/일탈화&lt;br /&gt;
고정관념 타파. Break the Frame&lt;/li&gt;
  &lt;li&gt;Hostility/적대발상&lt;br /&gt;
싫으면 말고. Hate it or Love it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Break the Frame은 올 시즌 한화 이글스의 캐치입니다. 이번 시즌 한화 이글스를 살리고 있는것이 이 캐치 때문일까요?&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;p&gt;p.s. 전반적으로 번역은 매끄러운 편입니다만  9장에서 머니볼 이야기를 하면서 (전문)통계만 의지하면 시장조사 자료(스카우트들의 정보)를 무시하게 되므로 그러지 마라고 번역한 부분은 오역입니다. 원문은 정반대에요.  머니볼은 감독이나 스카우트들의 경험이나 감(즉 시장조사)에 의지하기보다는 전문 통계정보를 의지한 팀이 Underdog의 반란을 이루어냈다라는 책이거든요. 메이저리그 좋아하시는 분들께는 &lt;a href=&quot;http://a.co/2orsCkM&quot;&gt;머니볼 책도&lt;/a&gt; 추천해드립니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 12:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/07/02/different-escaping-the-competitive-herd.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/07/02/different-escaping-the-competitive-herd.html</guid>
        
        <category>blog</category>
        
        <category>book</category>
        
        <category>different</category>
        
        <category>management</category>
        
        <category>strategy</category>
        
        
      </item>
    
      <item>
        <title>문체부의 불법 유통 해외사이트 집중 단속에 붙여</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글에서 등장하는 JYB, 갑돌이는 실제의 어떤 단체나 인물과도 관계가 없으며 설명을 위한 가공의 이름입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문체부가 2018년 5월 2일
&lt;a href=&quot;http://www.mcst.go.kr/web/s_notice/press/pressView.jsp?pSeq=16672&quot;&gt;웹툰 등 불법 유통 해외사이트 집중 단속 및 정품 이용 캠페인 연계 실시&lt;/a&gt;에 대하여 보도자료를 발표하였습니다. 그 내용에 따르면 (1) 법률개정을 통해 유해사이트 차단 절차를 간소화하겠다. (2) HTTPS 접속에 대해서도 SNI 필드를 이용해 차단하겠다. (3) SNI차단 전 까지는 DNS를 차단하겠다. 라고 하고 있습니다.&lt;/p&gt;

&lt;p&gt;불법 사이트의 차단 당위성은 이론의 여지가 없습니다. 그러나 차단 방식에 대해서는 반대하는 의견들이 있는데요, 우선 첫번째로 &lt;em&gt;“시민의 통신을 검열하겠다는 것이냐? 반대다.”&lt;/em&gt;라는 기본권 측면에서의 반대 의견이 있고요, 다음으로는 &lt;em&gt;“어차피 차단 안돼.”&lt;/em&gt;라는 기술적 측면에서의 반대의견이 있습니다. 이번 글에서는 기술적 측면에서 불법 사이트 차단 문제를 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;인터넷-사이트-접속&quot;&gt;인터넷 사이트 접속&lt;/h2&gt;
&lt;p&gt;인터넷에서 정보를 제공하는 사이트는 주소가 있습니다. IP(Intenet Protocol) 주소라고 합니다. 인터넷 사이트 네이버의 IP 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;210.89.164.90&lt;/code&gt; 입니다. 브라우저 주소창에 &lt;code class=&quot;highlighter-rouge&quot;&gt;210.89.164.90&lt;/code&gt;을 입력하면 네이버가 뜰 것입니다.&lt;/p&gt;

&lt;p&gt;숫자로 된 IP주소는 사람들이 기억하기에 어렵습니다. 그래서 인터넷 사이트를 “도메인 주소 체계”로 표기할 수 있도록 하였습니다. 네이버의 도메인 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;입니다. 브라우저 주소창에 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.naver.com&lt;/code&gt;을 입력하면 마찬가지로 네이버 창이 뜨게 됩니다.&lt;/p&gt;

&lt;p&gt;컴퓨터가 인터넷 통신을 할 때 필요한 것은 IP주소입니다. 도메인 주소로 인터넷 사이트 접속을 하고 싶을 때에는 도메인 주소에 대응되는 IP주소를 알아야 합니다. 컴퓨터는 그를 위해 DNS(Domain Name Service) 서버에 물어보고, IP주소가 응답되면 그 IP주소로 통신을 진행합니다.&lt;/p&gt;

&lt;p&gt;IP주소를 알아내어서 사이트에 접속할 경우 예전에 사용했던 방식은 HTTP(HyperText Transport Protocol)입니다. 최근에는 HTTPS (HTTP Secure / HTTP over SSL)이 많이 사용되는데, HTTPS는 HTTP에 비하여 처음 접속하는 도메인 주소를 제외하고는 대부분이 암호화 되어있다는 차이점이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;https-사이트-차단&quot;&gt;HTTPS 사이트 차단&lt;/h2&gt;
&lt;p&gt;과거 인터넷 접속의 많은 부분이 HTTP였던 경우에는 통신 경로 상에서 목적지 주소를 알 수 있었습니다. 차단을 위해서는 통신선로상 노출되어 있는 도메인 주소나 URL (웹브라우저에서 사용하는 주소창의 세부주소입니다)을 이용할 수 있었습니다. 그러나 HTTPS의 등장 및 보급에 따라 차단을 피하고자 하는 사이트는 모두 HTTPS로 옮겨갔죠. HTTPS 서비스의 경우 URL을 알 수 없고, 목적지도 HTTPS에서 사용되는 특수 통신 단계를 분석해야 목적지 도메인 네임만을 알 수 있을 뿐입니다.&lt;/p&gt;

&lt;p&gt;나쁜 사이트의 도메인 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;, IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;123.123.123.123&lt;/code&gt;이라고 하고, 차단 공지 서버의 IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;이라고 하겠습니다.&lt;/p&gt;

&lt;p&gt;문체부가 이야기하는것은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 도메인 서버로의 질의요청을 보고 차단 대상인 경우 응답을 거부하거나 해당 도메인 주소에 대한 IP주소로써 실제 주소가 아닌 가짜 서버의 IP주소를 반환하도록 하여 사이트 접속을 막겠다 입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;의 IP주소가 무엇인가요? 에 대한 대답으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;을 반환하도록 하여, 사용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;111.111.111.111&lt;/code&gt;에 접속을 해 보면 “유해사이트이므로 차단합니다”라는 공지화면을 받을 수 있도록 하겠다는 것입니다.&lt;/li&gt;
  &lt;li&gt;이후 HTTPS 목적지 분석이 가능해지면 해당 목적지의 도메인 네임을 가지고 차단하겠다는 것입니다. HTTPS 통신상의 목적지 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;이면 해당 통신을 끊어버리는 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재의 상황에서는 가장 합리적인 접근이라고 생각합니다.&lt;/p&gt;

&lt;h2 id=&quot;통신-자유를-위한-움직임-dns&quot;&gt;통신 자유를 위한 움직임: DNS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/audio-dj-mix-63703.jpg&quot; alt=&quot;솔로가 하고 싶어요&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;저는 한 아이돌 그룹의 막내 갑돌이에요. 솔로가 하고싶어서 형들 모르게 JYB로 이적하고 싶어요. 이적을 위한 등록 서버 주소를 알려주세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 주소를 주면 IP 주소를 알려주는 DNS 시스템은 그 구조상 통신 경로에 모든 요청과 응답이 노출됩니다.
갑돌이가 사무실 PC로 JYB서버에 접속했을 뿐이라도 그 내용을 누군가 다 알 수 있다는 거에요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;알 수 없는 이유로 모 아이돌 그룹의 막내 멤버가 교체된다는 찌라시가 돌고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTPS를 이용한 암호화 접속을 하더라도 제일 기본적인 DNS 서버에서는 누가(갑돌이 PC의 IP주소) 어떤 서버 (JYB 내부 웹 서버 도메인 주소)의
주소를 요청했는지 알 수가 있고요, 서버 뿐만이 아니라 모든 통신 경로상에서 해당 정보를 알아 낼 수가 있습니다.&lt;/p&gt;

&lt;p&gt;이런 정보는 돈이 되는 정보지요. 개개인을 향한 타겟 광고 시장이 굉장히 크기 때문에 많은 회사들은 &lt;strong&gt;“여러분들이
어떤 사이트를 방문하는지”를 알기 위해서 많은 돈을 집행합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인터넷 서비스의 근간이 되는 DNS가 너무 보안상 취약하다보니 이를 개선하기 위한 노력이 진행되어 왔는데요
최근 Mozilla가 자사의 브라우저인 Firefox에서 Cloudflare사의 DNS서비스와 연동하여 DNS 보안 문제를 해결하고자 제안하였습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에서 시스템 DNS 서버를 이용하지 않고, 별도로 준비된 &lt;strong&gt;믿을 수 있는 DNS 서버&lt;/strong&gt;를 이용한다. &lt;a href=&quot;https://wiki.mozilla.org/Trusted_Recursive_Resolver&quot;&gt;(Trusted Recursive Resolver)&lt;/a&gt;&lt;br /&gt;
클라우드플레어사는 DNS서비스 후 24시간 이후에 서비스 로그를 파기하며, 이에 대해 주기적 감사를 통해 투명하게 공개하겠다고 하였습니다.
즉 ‘이 회사는 고객 정보를 팔아먹지 않을 것 같다. 갑돌이의 인터넷 접속정보를 소속사에 넘기지 않을거 같다..’라는 것이구요.&lt;/li&gt;
  &lt;li&gt;믿을 수 있는 DNS 서버와는 &lt;strong&gt;DNS over HTTPS&lt;/strong&gt;를 이용한다.&lt;br /&gt;
“DNS서버는 믿을수 있다 쳐, 통신 선로상에서 볼 수 있잖아. 소속사 전산실에서 다 본다던데? 갑돌이를 지켜주세요” 라는
팬 분의 요청을 위해서 도메인 주소 질의응답을 암호화된 HTTPS를 이용하여 사용한다는 것입니다.&lt;/li&gt;
  &lt;li&gt;DNS 질의시 개인정보 보호를 위하여 최소한의 개인 정보를 전송한다.&lt;br /&gt;
“클라우드플레어를 믿는다 쳐도, 클라우드플레어에서 어차피 하부 도메인 서버로 물어봐야될 텐데, 2차 도메인 서버에서 정보유출이나
응답변조가 있을수도 있잖아?”
이런 것을 막기 위하여 2차 도메인 서버에 질의를 할 때 “누가”를 “갑X이” 혹은 “X돌이” 이런 식으로 간략화 하거나
아니면 아예 대리인명의로 질문을 던지도록 하고요,
또한 2차서버로 물어볼 때, 꼭 필요한 도메인 부분만을 전송하도록(&lt;a href=&quot;https://datatracker.ietf.org/doc/rfc7816/?include_text=1&quot;&gt;Qname Minimisation&lt;/a&gt;)하여 정보 유출을 최소화 하는 기술을 사용한다는것 입니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enroll.jybe.com&lt;/code&gt;의 주소가 뭐냐고 온 사방팔방에 묻는 것이 아니라&lt;/li&gt;
      &lt;li&gt;처음에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;의 주소가 뭐에요 물어서 그 관장하는 서버를 알고,&lt;/li&gt;
      &lt;li&gt;그 서버에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;jybe.com&lt;/code&gt; 주소가 뭐에요 물어봐서 또 해당 서버를 알고,&lt;/li&gt;
      &lt;li&gt;그 다음에서야 &lt;code class=&quot;highlighter-rouge&quot;&gt;jybe.com&lt;/code&gt;을 담당하는 서버에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;enroll.jybe.com&lt;/code&gt; 주소가 뭐에요? 물어보는 것이지요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 되면 도메인 서버와의 통신에서 개인 정보들이 지켜지게 되고, 우리의 갑돌이는 JYB에 누구도 모르게 서류를 전송할 수 있겠습니다.
그리고 문체부에서 DNS로 사이트 차단을 할 수가 없게 되겠구요.&lt;/p&gt;

&lt;p&gt;제 생각에는 Mozilla사의 위의 제안이 충분한 설득력을 가지기 때문에 Google이나 기타 브라우저 제작사에서도 유사한 기능을 탑재하게 되지 않을까 예측합니다.&lt;/p&gt;

&lt;h2 id=&quot;그렇다면-https는&quot;&gt;그렇다면 HTTPS는?&lt;/h2&gt;

&lt;p&gt;이렇게 하여 DNS까지는 거의 완벽한 프라이버시가 지켜지게 되었다고 합시다.&lt;/p&gt;

&lt;p&gt;그러면 HTTPS는 어떻게 될까요? 처음 접속하는 도메인 주소만을 “제외”하고 나머지가 대부분 암호화 된다고 말씀드렸죠?
그래서 문체부 자료에서 언급된 HTTPS 통신의 해당 정보 (SNI: Server Name Indication)를 이용한 차단은 현재 상황에서 합리적이라고 말씀드렸습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 되나 한 번 넣어봤을 뿐인데 이렇게 될 줄은 몰랐어요. - 갑돌&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;네. SNI주소가 노출되기 때문에 사용자의 인터넷 사이트를 모니터링하거나 차단할 수 있는 것입니다.&lt;/p&gt;

&lt;p&gt;해당 정보도 암호화 하면 되지 않나? 라는 의견에는, 다음 표준에는 그럴 수 있겠으나 일단 표준화가 되었으니 앞으로 한참 동안은 
해당 정보의 암호화는 어렵다라고 말씀드리고 싶네요.&lt;/p&gt;

&lt;p&gt;그렇지만 HTTP/2에서 SNI 차단을 우회할 수 있는 방안이 존재합니다. &lt;a href=&quot;https://daniel.haxx.se/blog/2016/08/18/http2-connection-coalescing/&quot;&gt;HTTP/2 Connection Coalescing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP/2는 하나의 서버와는 하나의 연결을 맺어두게 되고 하나의 연결을 이용하여 여러 서비스를 제공하게 됩니다. 
눈치 빠르신 분은 짐작하실 수도 있겠습니다만, 차단/감시대상과 전혀 무관한 도메인 주소가 해당 서버에 동시에 부여가 되면, 그 주소로 일단 접속한 이후에 감시대상 서버로의 접속은 SNI정보를 전송할 필요가 없다는 것입니다.&lt;/p&gt;

&lt;p&gt;나쁜 사이트의 도메인 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt;, IP주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;123.123.123.123&lt;/code&gt;이라고 할 때, 이 서버에 또 다른 도메인 주소인 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt; 을 등록했다고 한다면 아래와 같이 되는 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에서 HTTP/2로 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt; 접속. 이 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.goodsite.com&lt;/code&gt;이 SNI로 전송됩니다.&lt;/li&gt;
  &lt;li&gt;브라우저에서 HTTP/2로 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.badsite.com&lt;/code&gt; 접속. 이 때에는 SNI로 전송되는 것이 없으며, 따라서 감시나 제어를 할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;익명의 인재지원을 환영합니다.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;www.free-right.com&lt;/code&gt;에 접속후 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.jybe.com&lt;/code&gt;에 접속하십시오. -JYB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프라이버시에 민감한 글로벌 CDN업체의 경우 이와 유사한 방안을 멀지 않은 시기에 도입할 것으로 예측합니다.
반대 급부로 불법 업체가 악용한다고 하여도, 이익 단체인 CDN업체입장에서는 별도로 신고가 들어오기 전 까지는 방치하지 않을까요?
이런 서비스를 공개하면 많은 고객들이 사용할 테니까요.&lt;/p&gt;

&lt;h2 id=&quot;그러면-어떻게-해&quot;&gt;그러면 어떻게 해?&lt;/h2&gt;

&lt;p&gt;기술의 발전 및 프라이버시의 강화 조류를 볼 때 공개된 통신망에서 정보를 차단하는 것은
점차 어려워지는 방향으로 가고 있다고 생각합니다.&lt;/p&gt;

&lt;p&gt;과도기에 손을 놓고 있을 수 만은 없다고 생각하기에 개인적으로 이번 문체부 정책에 대해 긍정적인 편입니다만,
추후 네트워크 상에서 대책이 없어질 수 있다는 점을 상정하여 정책 고민 및 입안이 필요하다는 말씀 드리고 싶습니다.&lt;/p&gt;

&lt;p&gt;중국의 &lt;a href=&quot;https://namu.wiki/w/%ED%99%A9%EA%B8%88%EB%B0%A9%ED%8C%A8&quot;&gt;황금방패&lt;/a&gt;처럼 갈 수는 없지 않겠습니까?
DNS over HTTP를 차단할 수도, HTTP/2를 차단하는 것 도 현 시대에 맞지 않는 방법입니다.&lt;/p&gt;

&lt;p&gt;네트워크망이 아닌 사용자 단말에서의 유해/불법정보 차단 방안, 그리고 그것을 장려하는 법제화, Opt-in이 아닌 Opt-out 방안의 고민 등이 이루어져야 하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PC랑 스마트폰에 보안솔루션 꼭 깔아야해요?&lt;/p&gt;

  &lt;p&gt;왜요?&lt;/p&gt;

  &lt;p&gt;왜! - 갑돌&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 15:10:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/06/01/internet-filtering.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/06/01/internet-filtering.html</guid>
        
        <category>blog</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>web filtering</category>
        
        <category>dns</category>
        
        
      </item>
    
      <item>
        <title>*.co.kr 인증서가 발급되었습니다.</title>
        <description>&lt;p&gt;식목일입니다. 출근하니 인터넷이 전자정부 와일드카드 인증서때문에 시끌시끌하네요.&lt;/p&gt;

&lt;p&gt;인증서는 전 세계를 대상으로하는 주민등록증이라고 할 수 있는데 정부에서 운영을 잘 해주었어야 한다고 생각합니다.&lt;/p&gt;

&lt;p&gt;오늘의 사건에 대해서 쉽게 풀어보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;인증서&quot;&gt;인증서&lt;/h2&gt;

&lt;p&gt;인터넷 통신의 많은 부분이 프라이버시를 위하여 암호화 통신을 합니다. 인터넷으로 물건을 사고 송금을 하고 메세지를 보낼 때 통신 대상을 제외한 타인이 볼 수 없도록 되어있습니다. 그러면 이제 ‘내가 이야기하는 사람이 정말 내가 이야기하려는 사람이 맞나’만을 확인하면 안전한 통신을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;“저는 갑돌이와 이야기 하고 싶어요. 갑돌이에게만 돈을 보내야해요” 라는 을순이가 “안녕 나야, 갑돌이, 나 지금 돈이 필요한데 백만원만 보내줄래?”라는 메세지를 받는다고 돈을 부쳐서 발생하는 사건들은 잘 아시지요? &lt;strong&gt;인증서&lt;/strong&gt;는 이 때 주민등록증처럼 제시할 수 있습니다. 이 인증서는 그에 상응하는 암호키를 가진 사람만 암호화 통신에서 사용할 수 있어요. 즉, 암호화 통신을 할 때 받은 인증서를 보면 상대방이 누군지 확실히 알 수 있는겁니다. “아, 너 갑돌이 맞구나. 무슨일이야, 백만원 보내줄께”&lt;/p&gt;

&lt;h2 id=&quot;인증기관-ca-certificate-authority&quot;&gt;인증기관 (CA: Certificate Authority)&lt;/h2&gt;

&lt;p&gt;을순이가 너그럽다는 것을 안 병태는 메신저상에서 을순이를 속이려고 해요.&lt;/p&gt;

&lt;p&gt;“을순아 나 갑돌인데, 교통사고를 냈어. 급히 백만원이 필요해.”&lt;/p&gt;

&lt;p&gt;을순이가 상대방의 인증서를 봤더니 이름이 갑돌이인거에요. 을순이는 너그럽기는 했지만 꼼꼼한 성격이었기 때문에 인증서의 발급기관을 확인합니다. 보니까 발급기관이 대한민국이 아니고 버뮤다라고 되어 있네요?&lt;/p&gt;

&lt;p&gt;“너 갑돌이 아니구나, 이 얌생이! 사기치지말아” 하면서 을순이는 메신저를 꺼버리게 되었습니다.&lt;/p&gt;

&lt;p&gt;인증서 자체는 누구나 만들 수가 있어요. 그럼 그것을 어떻게 믿을까요? 대한민국이 발급한 주민등록증만 믿는 것 처럼, 인증서 역시 신뢰된 소수의 기관이 발급한 인증서만을 믿도록 인터넷은 구성되어 있어요.&lt;/p&gt;

&lt;p&gt;인증서를 발급해 주는 기관을 CA라고 합니다. CA는 인증서 발급 요청을 받으면 요청받은 인증서에 인감도장을 찍어줘요. 즉 전자 서명을 붙여주는 것이에요. 
사용자는 그 전자 서명을 보고 “나, 이 CA는 믿고 있어. 그러니까 이 CA의 인감도장이 찍혀 있으니 이 인증서도 믿을래” 라고 생각하게 되는 것이에요.
그래서 인증기관의 역할은 굉장히 중요하고, 인증기관은 자신의 신뢰도를 유지하기 위하여 노력을 하고 있죠.&lt;/p&gt;

&lt;h2 id=&quot;사고치는-인증기관들&quot;&gt;사고치는 인증기관들&lt;/h2&gt;

&lt;p&gt;인증기관도 사람이 운영하기 때문에 실수도 있을 수 있고, 의도적으로 사고를 칠 수도 있습니다.
병태가 정식으로 갑돌이 인증서를 발급받을 수 있다면 어떻게 되겠어요?&lt;/p&gt;

&lt;p&gt;그런데 그것이 실제로 일어났습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2017년 1월에 Symantec사가 도메인 소유자가 아닌 사람에게 인증서를 발급해준다는 리포트가 나옵니다.
  (이 사건에도 우리나라가 등장합니다. 해당 인증서는 Symantec이 인증한 기관인 우리나라의 Crosscert사에서 발급한 것입니다. 으음..)
  &lt;a href=&quot;https://www.mail-archive.com/dev-security-policy@lists.mozilla.org/msg05455.html&quot;&gt;관련정보&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;그래서 사람들이 Symantec사를 들여다보았더니, Crosscert이외에도 다른 여러 기관에 특별한 관리감독 없이 인증서를 발급할 권리를 주었고, 그 결과로 발급된 인증서들의 수가 30,000에 이른다고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 사건이 어떻게 끝났냐고요? 구글과 모질라사는 시만텍사가 발급한 인증서를 모두 취급정지하였고
(&lt;a href=&quot;https://blog.qualys.com/ssllabs/2017/09/26/google-and-mozilla-deprecating-existing-symantec-certificates&quot;&gt;관련기사&lt;/a&gt;)그 여파로 시만텍사는 자사의 인증서 사업부를 Digicert사에 매각하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;오늘의-사건&quot;&gt;오늘의 사건&lt;/h2&gt;

&lt;p&gt;우리나라에도 전자정부 서비스를 위하여 인증기관이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;행정전자서명 인증관리센터 (GPKI: Government Public Key Infrastructre) &lt;a href=&quot;https://www.gpki.go.kr&quot;&gt;https://www.gpki.go.kr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 GPKI에서 교육부에 아래의 인증서를 발급하였습니다.
인증서는 2015년 6월부터 2017년 9월까지 유효한 인증서이며, 발급기관(Issuer)이 대한민국 정부(Government of Korea)의 GPKI라고 명시되어 있죠. Subject를 보면 support.gne.go.kr을 대표할 도메인으로 만든 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/gpki_wildcard_cert1.png&quot; alt=&quot;문제의 인증서&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문제는 이 인증서가 support.gne.go.kr 말고도 다른 여러 도메인을 대표하고 있고, 그 안에 &lt;strong&gt;*.co.kr&lt;/strong&gt;과 &lt;strong&gt;*.go.kr&lt;/strong&gt;, &lt;strong&gt;*.or.kr&lt;/strong&gt;등이 포함되어 있다는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/gpki_wildcard_cert2.png&quot; alt=&quot;문제의 인증서가 대표하는 도메인들&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 이 인증서를 탑재한 사이트는 https://president.go.kr(청와대), https://kait.or.kr(한국정보통신진흥협회), https://lgcns.co.kr(LGCNS) 등을 자처할 수 있게 됩니다. DNS를 이용한 피싱이나 중간자공격(Man-In-The-Middle)등이 가능해지는 등 인터넷상의 보안 사고의 가능성이 열리게 되는 거에요.&lt;/p&gt;

&lt;p&gt;CA/Browser 포럼은 인증기관이 이런 문제가 있을만한 와일드카드 도메인의 발급 요청을 허락하여서는 절대로 아니된다(MUST NOT)고 규정하고 있습니다. (&lt;a href=&quot;https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.5.6.pdf&quot;&gt;Baseline Requirements 문서의 3.2.2.6 Wildcard Domain Validation 참고&lt;/a&gt;) *.mycompany.co.kr은 발급해 줄 수 있으나, *.co.kr은 안된다는 거에요.&lt;/p&gt;

&lt;p&gt;인증기관 업무의 중요성이 간과되었기에 발생한 일일 것이라고 생각합니다.
오늘 인터넷에 회자되어서 그렇지 이것은 과거에 벌어진 일이고 위의 인증서는 이미 만료되었습니다.
그러나 다른 인증서들에 문제가 없는지 점검하여 문제가 있다면 폐기하고, 
유사한 일이 다시 생기지 않도록 앞으로 잘 운영해 나가는 것이 중요하겠죠.&lt;/p&gt;

&lt;h2 id=&quot;잘못된-인증서의-발급을-어떻게-알-수-있었나요&quot;&gt;잘못된 인증서의 발급을 어떻게 알 수 있었나요&lt;/h2&gt;

&lt;p&gt;인증서 운영의 투명화를 위하여 여러 인증기관은 인증서를 발급할 때에 인증서 투명 로그 (Certificate Transparency Log)에 발급한 인증서를 등록하고 있습니다. 이번 사건과 같이 잘못된 형태의 도메인에 대해서 인증서가 발급이 되는지, 혹은 내 회사 도메인에 대해서 다른 제3자가 발급을 하는지에 대한 모니터링이 가능합니다.&lt;/p&gt;

&lt;p&gt;또한 브라우저마다, 인증서를 투명하게 공개하지 않은 인증서에 대해 경고를 하는 기능이 탑재될 예정에 있습니다.&lt;/p&gt;

&lt;p&gt;잘못된 인증서를 슬그머니 발급하려고 해도 이제 안돼요.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Apr 2018 09:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2018/04/05/omg-wildcard-cert-co-kr.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2018/04/05/omg-wildcard-cert-co-kr.html</guid>
        
        <category>blog</category>
        
        <category>ssl</category>
        
        <category>tls</category>
        
        <category>work</category>
        
        <category>certificate transparency</category>
        
        <category>GPKI</category>
        
        
      </item>
    
  </channel>
</rss>
