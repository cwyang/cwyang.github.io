<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>양철웅의 DX 이야기</title>
    <description>short essays on DX, cyber security, and cloud
</description>
    <link>http://cwyang.github.io/</link>
    <atom:link href="http://cwyang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Jan 2024 19:08:24 +0900</pubDate>
    <lastBuildDate>Fri, 12 Jan 2024 19:08:24 +0900</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>HTTP/2 Rapid Reset DoS공격</title>
        <description>&lt;p&gt;HTTP/2 프로토콜을 이용한 서비스거부공격(DoS)에 대한 대처가 필요하다.&lt;/p&gt;

&lt;p&gt;통신구간이 암호화되어 프라이버시는 좋아졌지만 보안장비를 우회한 네트워크 침투가 용이해진 것 처럼
HTTP/1에서 HTTP/2로 프로토콜 성능이 개선됨에 따라 보통 사용자뿐만 아니고 공격자의 전송성능이 올라가서
DoS가 쉽게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-44487&quot;&gt;CVE-2023-44487&lt;/a&gt;은 2023년 10월 10일 발표된 취약점으로 
HTTP/2 프로토콜에서 공격자가 요청을 보내고 즉시 해당 요청을 끊어 총 요청수 제한을 회피함으로써 
서비스 거부 공격을 쉽게 할 수 있다는 내용으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/2 Rapid Reset&lt;/code&gt; 공격으로 불리운다.&lt;/p&gt;

&lt;p&gt;HTTP/1는 하나의 네트워크 연결에서 요청-응답 사이클로 정보를 전송한다.
카페에서 줄을 서고, 맨 앞 사람이 주문하면 커피가 나올때까지 해당 줄은 대기한다.
좀더 빨리 처리하기 위해서 줄을 여러개를 운영하는 것이 HTTP/1.&lt;/p&gt;

&lt;p&gt;HTTP/2는 주문을 받으면 대기표를 준다. 커피를 받는 순서는 주문 순서가 아니고 커피가 제조되서 나오는 순서이다.
줄 하나에 수백개의 주문을 바리스타에게 전달할 수 있다.
바리스타가 처리할 수 있는 양은 한정되어 있을 것이므로 주문하는 대로 모두 받다보면 카페는 마비된다.
그래서 총 대기표의 수를 제한하고, 대기표가 모두 배부되었으면 그때부터는 주문자들은 자신이 주문할 수 있을때까지
줄에서 기다려야한다. 이것이 HTTP/2.&lt;/p&gt;

&lt;p&gt;이번 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP/2 Rapid Reset&lt;/code&gt; 공격에서는 공격자가 줄을 서고, 주문하고, 바리스타에게 주문이 들어갈때쯤 (굉장히 짧은 시간이므로 주문 하자마자 즉시) 주문을 취소하고 대기표를 반환한다. 총 대기표의 수가 제한되어 있지만 주문을 하자마자 취소하였으니
제한된 수를 넘지 않고, 착한 캐셔는 계속 주문을 받는다. 공격자가 아닌 일반 고객들은 그들의 줄에서  나오지 않는 커피를 한정없이 기다리게된다.&lt;/p&gt;

&lt;p&gt;HTTP/3도 표준이 된 지금 HTTP/2는 이미 안정화상태이고 많은 웹 서버, WAS서버등에서 기본적으로 활성화하고 있다.
따라서 nginx, apache는 물론이고, &lt;a href=&quot;https://tomcat.apache.org/security-11.html&quot;&gt;tomcat&lt;/a&gt;, &lt;a href=&quot;https://github.com/grpc/grpc-go/security/advisories/GHSA-m425-mq94-257g&quot;&gt;go-grpc&lt;/a&gt;등, 대중에 노출된 서버라면 
이번 공격에 대해서 취약점이 해결된 버젼으로 업그레이드 하는 것이 필요하다.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jan 2024 19:00:03 +0900</pubDate>
        <link>http://cwyang.github.io/2024/01/12/http2-rapid-reset.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2024/01/12/http2-rapid-reset.html</guid>
        
        <category>blog</category>
        
        <category>security</category>
        
        <category>DoS</category>
        
        <category>DDoS</category>
        
        <category>HTTP/2</category>
        
        <category>gRPC</category>
        
        
      </item>
    
      <item>
        <title>gRPC 들여다보기</title>
        <description>&lt;p&gt;그동안 데이터플레인 개발만 하고 있었는데
이제 컨트롤플레인 개발을 할 필요가 있어서 gRPC에 대해서 들여다보았다.
꼭 gRPC를 사용하겠다는 결정을 하기는 이르지만 etcd 등 클라우드 네이티브
환경에서는 gRPC를 많이 사용하니까 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gRPC가 바이너리, 양방향 통신을 지원하는
언어 무관 RPC 프레임워크다&lt;/code&gt; 라는 것 보다는 조금 자세히 알 필요가 있다.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Nov 2023 10:20:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/11/12/grpc.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/11/12/grpc.html</guid>
        
        <category>gRPC</category>
        
        
      </item>
    
      <item>
        <title>Linux 라우팅</title>
        <description>&lt;p&gt;라우팅은 패킷을 전달할때 패킷을 내보낼때
어느 인터페이스로 어느 Next-hop 주소로 보낼지를 결정한다.&lt;/p&gt;

&lt;p&gt;목적 IP만을 보고 결정하는 것이 종래의 라우팅이고,
소스 IP, 포트등 다른 정보까지 보고 결정하는 것이 
Policy-based routing (PBR)로써
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fib_lookup()&lt;/code&gt;은 PBR기능을 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip rule&lt;/code&gt;을 통해 Routing Policy DB (RPDB)를 설정하는데,
RPDB는 priority, selector, action으로 이루어져 있고
3개의 라우팅 테이블이 기본 설정되어 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0     : from all lookup local
32766 : from all lookup main
32767 : from all lookup default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;local테이블에는 default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt; 라우트 설정이 없다.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Sep 2023 19:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/09/04/linux-routing.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/09/04/linux-routing.html</guid>
        
        <category>Linux</category>
        
        <category>routing</category>
        
        
      </item>
    
      <item>
        <title>UDP 에코 서버</title>
        <description>&lt;p&gt;테스트를 위해 UDP 에코 서버를 만들다보니 TCP보다 좀 손이 많이 갔다.&lt;/p&gt;

&lt;p&gt;UDP는 connectionless이기에 TCP와 달리 데이터 주고받을 때에 고려해야 할
다음과 같은 경우들이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;보낸 요청에 대해서 다른 IP로부터 응답이 돌아오는 경우.&lt;/li&gt;
  &lt;li&gt;서버가 IP주소를 여러개 가지고 있을 때, 받은 요청에 대해 응답을 할 IP를 결정하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;소켓의-연결성&quot;&gt;소켓의 연결성&lt;/h2&gt;
&lt;p&gt;UDP가 connectionless라는 것은 프로토콜 수준에서 연결 상태가 유지되지 않는다는 것이다. 즉&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;연결 단계(connection handshake)가 없고&lt;/li&gt;
  &lt;li&gt;통신 peer들 간에 상태 저장에 대한 부분이 프로토콜상에 정의되어 있지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 소켓 자체는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect()&lt;/code&gt;을 호출하여 상태 유지가 가능하다.
연결된 UDP소켓은 목적 주소를 지정하지 않아도 연결된 목적 주소로 패킷을 송신하며,
소켓의 UDP 포트로 목적지가 아닌 곳에서 패킷이 수신된다면 수신을 거부한다.&lt;/p&gt;

&lt;h2 id=&quot;클라이언트&quot;&gt;클라이언트&lt;/h2&gt;

&lt;p&gt;UDP가 connectionless이기는 하나, 소켓을 만들고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect()&lt;/code&gt;를 하면 내부적으로 연결 테이블이 만들어진다.
해당 소켓에는 목적지 지정 없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send()&lt;/code&gt;를 통해 데이터 송신을 할 수 있다.
연결 테이블에 매칭되는, 즉 5-tuple에 매칭되는 패킷이 수신되면 해당 소켓을 통해 응답 패킷을 읽을 수 있다.
연결 테이블에 매칭되지 않는 (IP, 포트) 로부터 패킷이 수신되는 경우 네트워크 스택은 해당 패킷을 거절하고,
ICMP Port Unreachable 패킷을 송신하여 거절하였음을 알린다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect()&lt;/code&gt; 없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendto()&lt;/code&gt;로 데이터를 보내는 경우 해당 소켓의 송신 포트로 패킷이 제한없이 들어올 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;서버&quot;&gt;서버&lt;/h2&gt;

&lt;p&gt;클라이언트가 자신이 보내지 않은 IP에서 응답이 수신되면 거절하기 때문에
서버는 클라이언트가 송신한 목적 IP를 가지고 응답 패킷을 만들어야한다.&lt;/p&gt;

&lt;p&gt;TCP의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept()&lt;/code&gt;를 통해 송수신 4-튜플이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(srcip, srcport, dstip, dstport)&lt;/code&gt; 결정되는 반면,
UDP의 경우 자신이 여러 IP주소를 가지고 있고, 모든 IP 주소를 대상으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind()&lt;/code&gt;를 수행하였다면
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(srcip, srcport)&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recv()&lt;/code&gt;를 통해 알 수 있고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dstport&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind()&lt;/code&gt;시의 값으로 결정되나
목적지IP인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dstip&lt;/code&gt;를 표준 소켓인터페이스로 알 수는 없다&lt;/p&gt;

&lt;h2 id=&quot;ip_pktinfo&quot;&gt;IP_PKTINFO&lt;/h2&gt;
&lt;p&gt;Linux에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP_PKTINFO&lt;/code&gt; 소켓 옵션을 이용하여 UDP 소켓의 목적 주소를 접근할 수 있다.
해당 소켓 옵션을 활성화 한다면
수신 패킷에 대해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recvmsg()&lt;/code&gt;를 통한 목적 주소 파악이 가능하고
송신 패킷에 대해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendmesg()&lt;/code&gt;롤 통한 송신 주소 설정이 가능하다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ man 7 ip
       IP_PKTINFO (since Linux 2.2)
              Pass an IP_PKTINFO ancillary message that contains a pktinfo structure  that
              supplies  some  information  about the incoming packet.  This only works for
              datagram oriented sockets.  The argument is a flag  that  tells  the  socket
              whether  the IP_PKTINFO message should be passed or not.  The message itself
              can only be sent/retrieved as control message with a packet using recvmsg(2)
              or sendmsg(2).

                  struct in_pktinfo {
                      unsigned int   ipi_ifindex;  /* Interface index */
                      struct in_addr ipi_spec_dst; /* Local address */
                      struct in_addr ipi_addr;     /* Header Destination
                                                      address */
                  };

              ipi_ifindex is the unique index of the interface the packet was received on.
              ipi_spec_dst is the local address of the packet and ipi_addr is the destina‐
              tion  address  in  the packet header.  If IP_PKTINFO is passed to sendmsg(2)
              and ipi_spec_dst is not zero, then it is used as the  local  source  address
              for  the  routing  table  lookup and for setting up IP source route options.
              When ipi_ifindex is not zero, the primary local  address  of  the  interface
              specified by the index overwrites ipi_spec_dst for the routing table lookup.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;udp-에코-서버&quot;&gt;UDP 에코 서버&lt;/h2&gt;
&lt;p&gt;파이선으로 만들어본 UDP 에코 서버&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IP_PKTINFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unpack_cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_ifindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'IHH4s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;udp_echo_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOL_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP_PKTINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack_cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmsgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RECV: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; -&amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_addr&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;udp_echo_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 16 Jul 2023 19:02:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/07/16/UDP-echo-server.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/07/16/UDP-echo-server.html</guid>
        
        <category>Unix</category>
        
        <category>socket</category>
        
        <category>UDP</category>
        
        <category>echo server</category>
        
        <category>python</category>
        
        <category>IP_PKTINFO</category>
        
        
      </item>
    
      <item>
        <title>Linux Settings in 2023</title>
        <description>&lt;p&gt;잠시 사용하던 윈도우에서 다시 리눅스로 돌아가고자 한다.
랩탑에 설치하는 것은 처음이다. 윈도우와 최대한 유사하게 꾸며보기로 한다.&lt;/p&gt;

&lt;h3 id=&quot;확인할-것들--개선필요사항&quot;&gt;확인할 것들 / 개선필요사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BIOS sleep state: linux(s3) sleep vs windows modern sleep
    &lt;ul&gt;
      &lt;li&gt;modern standby가 더 신속하지만 power를 많이 먹는다고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본-환경&quot;&gt;기본 환경&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Thinkpad X1 Carbon Gen9&lt;/li&gt;
  &lt;li&gt;Mint Linux 21.1 (2022년 12월 출시)&lt;/li&gt;
  &lt;li&gt;파티션: base(60G), swap(16G), home(100G)&lt;/li&gt;
  &lt;li&gt;부트로더: on hdd. windows bootmgr와 별도로 구성&lt;/li&gt;
  &lt;li&gt;한글: fcitx (기본)
    &lt;ul&gt;
      &lt;li&gt;한영전환: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Space&lt;/code&gt;(기본), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift+Space&lt;/code&gt; (추가)&lt;/li&gt;
      &lt;li&gt;사용하다보면 힌트윈도우가 떠서 거슬릴때가 있는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Alt+P&lt;/code&gt;로 비활성화 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블루투스, 사운드, 웹캠 기본 정상작동&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;핫키설정&quot;&gt;핫키설정&lt;/h3&gt;
&lt;p&gt;Setting » Keyboard » Shortcut 에서 지정한다. 윈도우와 유사하게 설정&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run Dialog: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+R&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Home Folder: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+E&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Web Browser: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+C&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Terminal: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+T&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Setting: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+I&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Lock Device: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+L&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Push Tile: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Super+DIR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Move Tile to Other Monitor: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shft+Super+DIR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Screenshot to Clipboard: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift+Super+S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ACPI성능프로파일: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn+L&lt;/code&gt; (low) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn+M&lt;/code&gt; (mid), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn+H&lt;/code&gt; (high perf)
    &lt;ul&gt;
      &lt;li&gt;확인: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /sys/firmware/acpi/platform_profile&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;설치-앱&quot;&gt;설치 앱&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Google Chrome&lt;/li&gt;
  &lt;li&gt;Virtual Box&lt;/li&gt;
  &lt;li&gt;VS Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹앱&quot;&gt;웹앱&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 웹 브라우저를 앱과 같이 등록할 수가 있다. 웹 메신저등에 활용가능하다.
실행중이 아니면 알림을 못받는 문제, 알림뱃지등이 없는 한계가 있지만 아쉬운대로 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webapp-manager&lt;/code&gt; 등록후 taskbar고정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;가상환경&quot;&gt;가상환경&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;default vagrant 가 vbox 7.x을 지원하지 않아 vbox 6.0을 설치하여 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;네트워크&quot;&gt;네트워크&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;태스크바에 네트워크 추가
    &lt;ul&gt;
      &lt;li&gt;Setting » Startup Application » Add Network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VPN
    &lt;ul&gt;
      &lt;li&gt;openconnect vpn을 사용한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install network-manager-openconnect network-manager-openconnect-gnome&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;설치 이후 Setting » Network » Add VPN&lt;/li&gt;
      &lt;li&gt;vpn typ 설정 후 게이트웨이를 지정&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolvectl --status&lt;/code&gt;로 vpn0에서 DNS 설정이 되어 있는지 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프린터&quot;&gt;프린터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sindoh D400 linux driver
    &lt;ul&gt;
      &lt;li&gt;generic PCL6&lt;/li&gt;
      &lt;li&gt;https://hamonikr.org/board_practice/4537#comment_73416&lt;/li&gt;
      &lt;li&gt;https://acehyuk.tistory.com/351&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 26 Mar 2023 09:24:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/03/26/linux-settings.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/03/26/linux-settings.html</guid>
        
        <category>linux</category>
        
        <category>settings</category>
        
        <category>mint</category>
        
        <category>ubuntu</category>
        
        <category>thinkpad</category>
        
        
      </item>
    
      <item>
        <title>Azure VNET 라우팅</title>
        <description>&lt;p&gt;Azure의 VNET(Virtual Network)은 클라우드상의 네트워크 환경이다.
AWS의 VPC (Virtual Private Cloud)에 대응한다.
VNET에 할당된 주소범위(CIDR)를 구분하여 서브넷을 만들고, 서브넷간의 라우팅이 가능하다.
VNET은 독립된 네트워크인데 주소범위가 겹치지 않는다면 여러 VNET을 연결(peering)하여 구성이 가능하다.
이러면 VPC사이에서도 라우팅이 가능하다.&lt;/p&gt;

&lt;p&gt;라우팅 테이블은 서브넷마다 부여된다.
서브넷이란 원래 L2도메인, 즉 같은 네트워크상에서는 라우팅이 필요없이 목적지로 연결되는 의미인데
클라우드에서는 그렇지 않으며 단순히 VNET을 세분화한 네트워크 영역이다.
L2 도메인과 유사하게 동작하기 위해서 라우팅 테이블에
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;서브넷 CIDR --&amp;gt; VNET&lt;/code&gt; 이라는 라우팅을 넣어야 한다.
편의를 위해 라우팅 테이블 생성시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VPC CIDR --&amp;gt; VNET&lt;/code&gt; 항목이 기본적으로 등록된다.&lt;/p&gt;

&lt;p&gt;클라우드 네트워크 구현에 따라 서브넷이 L2도메인일 수도 있겠으나,
만약 라우팅 엔트리가 필요없이 서브넷간의 통신이 된다면
해당 클라우드의 네트워크가 SDN이 아닌 종래의 네트워크 구조에 기반하기 때문일 것이다.
복잡하고 큰 네트워크를 구성하기 위해서는 SDN구성이 좋고,
SDN구성에서는 서버들이 L2가 아닌 오버레이 L3로 연결되어있다.&lt;/p&gt;

&lt;p&gt;Azure 의 라우팅 목적지 타입으로는
(1) 로컬 VNET안의 서버로 보내기 위한 &lt;em&gt;VNET&lt;/em&gt;
(2) 인터넷 영역, 즉 인터넷 게이트웨이로 보내기 위한 &lt;em&gt;Internet&lt;/em&gt;
(3) 통신을 차단하기 위한 &lt;em&gt;Drop&lt;/em&gt;
(4) 연결된 다른 VNET으로 보내기 위한 &lt;em&gt;VNET Peering&lt;/em&gt;
(5) 연결된 다른 네트워크 (BGP나 VPN)로 보내기 위한 &lt;em&gt;VNET Gateway&lt;/em&gt;
(6) 허용된 특정 클라우드 서비스로 보내기 위한 &lt;em&gt;VNETServiceEndpoint&lt;/em&gt; 가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/azure-routing-example.png&quot; alt=&quot;Azure 라우팅 구성예&amp;lt;br&amp;gt;https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure는 사용자가 서브넷 라우팅을 생성하는 기능을 제공하는데 이를 UDR (User-Defined Routing) 이라고 한다.
정적static 라우팅, 커스텀 라우팅 모두 동일한 의미이다.
UDR에서는 침입탐지 시스템 등의 보안장비를 연동하기 위한 &lt;em&gt;Virtual Appliance&lt;/em&gt; 라우팅 목적지를 제공한다.&lt;/p&gt;

&lt;p&gt;등록된 서브넷 라우팅 엔트리에 대해 &lt;em&gt;Longest Prefix Match&lt;/em&gt;를 이용하여 라우팅을 결정한다.
주소매칭이 동일한 경우 (1) UDR (2) BGP (3) 시스템라우팅 순서로 우선한다.
다만 BGP라우트는 VNET, VNET Peering, VNETServiceEndpoint보다 우선순위가 낮다.&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Feb 2023 20:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/02/08/Azure-VNET-routing.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/02/08/Azure-VNET-routing.html</guid>
        
        <category>CloudNetwork</category>
        
        <category>Azure</category>
        
        <category>VNET</category>
        
        <category>Subnet</category>
        
        <category>UDR</category>
        
        <category>VPC</category>
        
        <category>L2-domain</category>
        
        
      </item>
    
      <item>
        <title>ChatGPT-3가 설명하는 ChatGPT-3</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/cwyang-q.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
Introduce &lt;a href=&quot;https://en.wikipedia.org/wiki/ChatGPT&quot;&gt;ChatGPT-3&lt;/a&gt; in style of blog writing.&lt;/p&gt;
&lt;p /&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/chatgpt-a.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
Hello everyone! Today, we’ll be talking about the latest language model from OpenAI, ChatGPT-3. As the third iteration of the original GPT (Generative Pretrained Transformer) architecture, ChatGPT-3 has taken the world of NLP (Natural Language Processing) by storm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/chatgpt3.jpg&quot; alt=&quot;ChatGPT-3, the game changer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This state-of-the-art model has been trained on a massive amount of diverse internet text, allowing it to generate human-like text with remarkable accuracy. From answering questions to translating languages, summarizing long texts, and performing other language-related tasks, ChatGPT-3 has shown unparalleled proficiency in its field.&lt;/p&gt;

&lt;p&gt;With its cutting-edge capabilities, ChatGPT-3 has set new standards in the NLP community and has been making waves in both academic and commercial applications. Whether you’re a researcher, a business owner, or just someone who’s curious about AI and NLP, ChatGPT-3 is a name that you should definitely keep an eye on.&lt;/p&gt;

&lt;p&gt;So, without further ado, let’s dive into the world of ChatGPT-3 and see what makes this model truly special.&lt;/p&gt;
&lt;p /&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/cwyang-q.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
Translate the answer into Korean&lt;/p&gt;
&lt;p /&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/chatgpt-a.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
안녕하세요! 오늘은 OpenAI에서 개발한 최신 언어 모델, &lt;a href=&quot;https://ko.wikipedia.org/wiki/ChatGPT&quot;&gt;ChatGPT-3&lt;/a&gt;에 대해 이야기해볼께요.
GPT (Generative Pretrained Transformer) 구조의 세 번째 버전인
ChatGPT-3은 NLP (Natural Language Processing) 세계를 휩쓸었습니다.&lt;/p&gt;

&lt;p&gt;이 고급 언어 모델은 다양한 인터넷 텍스트로 교육되었기 때문에,
놀랍도록 정확하게 인간처럼 텍스트를 생성합니다.
질문에 답하기, 언어 번역, 긴 텍스트 요약, 기타 언어 관련 작업까지,
ChatGPT-3은 자신의 분야에서 대단한 전문성을 보여주고 있습니다.&lt;/p&gt;

&lt;p&gt;최첨단 기능들로, ChatGPT-3은 NLP 커뮤니티에서 새로운 표준을 설정하였으며,
학술적인 뿐만 아니라 상업적인 응용도에서도 큰 파장을 일으키고 있습니다.
연구원, 사업가, 또는 AI와 NLP에 관심이 있는 사람이라면,
ChatGPT-3은 확실히 주의깊게 지켜봐야합니다.&lt;/p&gt;

&lt;p&gt;자, 더 망설이지 마시고, ChatGPT-3의 세계로 함께 들어갑시다.
그리고 이 모델이 가지는 진정하게 특별한 점이 무엇인지 알아보아요.&lt;/p&gt;
&lt;p /&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/cwyang-q.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
Show me 10 hashtags that describes this article best&lt;/p&gt;
&lt;p /&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/chatgpt-a.jpg&quot; alt=&quot;&quot; style=&quot;float: left&quot; /&gt;
#ChatGPT3 #NLP #ArtificialIntelligence #CuttingEdgeTechnology #Research
#Business #AI #MachineLearning #Innovation #TechnologyTrends&lt;/p&gt;
&lt;p /&gt;

&lt;hr /&gt;

&lt;p&gt;ChatGPT3에게 세가지 질문을 하고, 결과를 약간 손 보아 올립니다.&lt;/p&gt;

&lt;p&gt;실사용이 가능한 대화형 인터페이스.
스마트폰 이후 또 하나의 기술 변곡점이 되지 않을까 생각합니다.&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Feb 2023 20:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/02/07/what-is-chatgpt3.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/02/07/what-is-chatgpt3.html</guid>
        
        <category>ChatGPT3</category>
        
        <category>NLP</category>
        
        <category>ArtificialIntelligence</category>
        
        <category>CuttingEdgeTechnology</category>
        
        <category>Research</category>
        
        <category>Business</category>
        
        <category>AI</category>
        
        <category>MachineLearning</category>
        
        <category>Innovation</category>
        
        <category>TechnologyTrends</category>
        
        
      </item>
    
      <item>
        <title>HAProxy, 그리고 OpenSSL3 성능</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.haproxy.com/blog/announcing-haproxy-2-7/&quot;&gt;2022년 12월 HAProxy 2.7이 나왔습니다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여러 개선중에 최대 스레드 지원이 기존 64개에서 4096개로 늘어난 것이 눈에 띕니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However, due to the fast, atomic operations involved at many places, HAProxy was previously limited to 64 threads, and therefore 64 CPU cores, on 64-bit machines. This limit is now raised to 4096 threads by the introduction of thread groups.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사실 HA-Proxy는 이미 성능이 충분히 좋아서 최대 스레드를 저렇게 늘릴 까닭은 별로 없습니다… SSL 처리를 위해서가 아니라면요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/OpenSSL_logo.png&quot; alt=&quot;OpenSSL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문제는 HAProxy가 사용하고 있는 OpenSSL 3.0이 그렇게 성능이 좋지가 않다는 겁니다.
OpenSSL 3.0의 큰 설계방향은 개발의 편의성을 위해서 모듈화/추상화를 만들어 넣은 건데, 반대급부로 성능이 많이 떨어졌습니다.
모듈이 복잡해지면 공유자원 사용을 위한 락이 많이 사용되는 경향이 있기 때문에, 스레드(코어)가 많아질수록 CPU 락 경합때문에 발생하는 성능 저하 현상이 문제가 됩니다.
&lt;a href=&quot;https://github.com/openssl/openssl/issues/17627#issuecomment-1060123659&quot;&gt;공식 github사이트에 30배 CPU부하증가, 3배/10배/80배 느려짐, 95% CPU 등&lt;/a&gt; 여러 성능 이슈가 보고되고 있고, 개선되고 있습니다.&lt;/p&gt;

&lt;p&gt;HAProxy나 그밖의 OpenSSL을 사용하는 시스템이 다중 스레드에서 높은 처리성능을 발휘해야한다면 앞으로도 당분간은 openssl-3보다는 openssl-1.1.1을 사용하시는 것을 권해드립니다.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Feb 2023 20:00:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/02/03/slow-openssl-3.0.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/02/03/slow-openssl-3.0.html</guid>
        
        <category>blog</category>
        
        <category>ssl</category>
        
        <category>openssl</category>
        
        <category>haproxy</category>
        
        
      </item>
    
      <item>
        <title>패스워드 매니저의 위험성과 클라우드 보안</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://blog.lastpass.com/2022/12/notice-of-recent-security-incident/&quot;&gt;2022년 12월 LastPass의 패스워드들이 유출되었습니다.&lt;/a&gt;
LastPass는 클라우드 스토리지에 패스워드들을 저장하고 있었는데
2022년 8월에 유출된 정보를 통해 이번에 패스워드들이 유출되었다고 해요.
패스워드는 &lt;a href=&quot;Password-Based Key Derivation Function 2&quot;&gt;PKBDF2&lt;/a&gt;(https://en.wikipedia.org/wiki/PBKDF2)&lt;sup&gt;&lt;a href=&quot;#footnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;로 암호화되어 있었어요. 즉 해시만이 저장되어 있었는데요. 이게 안전하지 않다는 이야기가 많습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/password.jpg&quot; alt=&quot;패스워드 과연 안전한가?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보안을 위해 40 비트, 64 비트 키는 안전하지 않다. 128 비트 이상을 사용하라는 이야기 들어보셨을텐데요,
일반적인 사용자들의 패스워드는 40 비트 정도의 엔트로피를 가진다고 합니다.
40 비트키는 매우 취약하다는 이야기 많이 들어보셨을거에요.
랜덤하게 만들어도 72 비트 이상가기가 어렵다고 하는데요.
그래서 PBKDF2를 반복(iteration)해서 적용하여 안전한 키를 만듭니다. 반복할 때마다 패스워드가 강화되는 것이고요, 
&lt;del&gt;+9 집행검이&lt;/del&gt; 안전한 키가 나올때까지 계속 강화하는겁니다.&lt;/p&gt;

&lt;p&gt;이번에 키 누출과 함께 나온 이슈가 LastPass가 PBKDF2를 설렁설렁(?) 사용했다는 것입니다.
LastPass의 주장은 PBKDF2를 100,100번 이터레이션한다는 것이지만 &lt;a href=&quot;https://www.reddit.com/r/Lastpass/comments/106p7le/by_default_the_number_of_password_iterations_that/&quot;&gt;그렇지 않다는 주장들을 볼 수 있어요.&lt;/a&gt; 
약한 패스워드에 대해 강화를 몇번 안돌렸으니 결과도 취약해진거고 그것이 유출된 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/2012-linkedin-breach-117-million-emails-and-passwords-stolen-not-6-5m&quot;&gt;2012년에 LinkedIn 에서도 1억개 이상의 암호화된 패스워드가 유출되었었는데,&lt;/a&gt; 그 암호화 방식이 unsalted SHA1 이어서 문제가 된 적도 있었어요. 같은 패스워드면 암호화된 패스워드도 같았고, 암호화 방식도 취약한 SHA1이었으니 말 다한 것이죠.&lt;/p&gt;

&lt;p&gt;클라우드 스토리지에 고객 정보를 저장할때에는 항상 정보가 유출될 수 있다는 생각을 가지고 고객 데이터를 안전하게 관리해야 합니다.
공개 클라우드는 제대로 보안 관리가 되지 않으면 훔쳐가세요~하는 것과 마찬가지니까요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개인정보는 암호화하고&lt;/li&gt;
  &lt;li&gt;암호는 일정수준 이상의 보안강도를 유지하며&lt;/li&gt;
  &lt;li&gt;클라우드상의 리소스의 접근권한을 올바르게 관리해야합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;개인으로서는 세상에 절대 안전한 서비스는 없다는 것을 인지하고
(패스워드 매니저가 털리고 그것이 허술하게 관리될 줄이야 누가 알았겠어요)
복잡한 암호를 사용해서 기본적으로 높은 엔트로피를 주는 것이 중요하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a id=&quot;footnote1&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2898&quot;&gt;RFC2898&lt;/a&gt;에 정의되어있으며, ISO-27001 보안규정을 준수하고 있는, 제대로 사용한다면 안전한 함수입니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Feb 2023 21:30:00 +0900</pubDate>
        <link>http://cwyang.github.io/2023/02/02/security-of-the-password-mangagers.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2023/02/02/security-of-the-password-mangagers.html</guid>
        
        <category>blog</category>
        
        <category>cloud</category>
        
        <category>security</category>
        
        <category>password</category>
        
        <category>pbkdf2</category>
        
        
      </item>
    
      <item>
        <title>API endpoint들의 취약한 TLS 버젼</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/blogs/security/tls-1-2-required-for-aws-endpoints/&quot;&gt;내년 6월부터 모든 AWS API에서 TLS1.2 미만을 지원중지한다는 소식&lt;/a&gt;을 접하여, TLS 버젼 이야기 짧게 드립니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cwyang.github.io/assets/images/unlocked.jpg&quot; alt=&quot;TLS 1.0, 1.1은 아주 취약해요!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TLS 1.2 미만 (SSL*, TLS1.0, TLS1.1)은 그 보안취약점으로 인해 &lt;a href=&quot;https://datatracker.ietf.org/doc/rfc8996/&quot;&gt;IETF가 2021년 3월에 정식으로 관뚜껑에 못질을 하였습니다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;이 때 &lt;a href=&quot;https://aws.amazon.com/ko/blogs/security/tls-1-2-required-for-aws-fips-endpoints/&quot;&gt;AWS는 FIPS 엔드포인트에서 TLS1.2 미만을 지원중지&lt;/a&gt;하였습니다.&lt;/p&gt;

&lt;p&gt;그리고 내년 6월부로 모든 AWS API에서 TLS1.2 미만을 지원중지하는 것입니다.&lt;/p&gt;

&lt;p&gt;AWS에서는 서비스 마이그레이션을 위해 클라우드트레일에서 접속 TLS 버젼을 확인하고 취약한 TLS1.0, 1.1을 사용하면 해당 클라이언트를 업데이트하도록 권장하고 있습니다.&lt;/p&gt;

&lt;p&gt;브라우저벤더들이 (MS, Google, Apple, Mozilla) 2020~2021년에 걸쳐서 해당 버젼 지원을 중지하였기 때문에 TLS1.2 이상으로 통신을 강제하여도 대부분 문제가 없겠으나
레거시/커스텀 소프트웨어가 TLS통신을 할 경우 취약한 버젼으로 연결이 맺어질 수 있어 보안에 문제가 있는 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;신규 서비스 TLS 엔드포인트를 만들때에는 TLS1.2 이상으로 지정하도록 해야하고요,
기존 서비스 엔드포인트에 대해서도 취약한 TLS버젼에 어떻게 대처할 지 고민이 필요하겠지요?
구형 앱이나 프로그램에서 AWS 접속을 할 때 문제 없도록 확인도 해 주셔야겠고요.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/openssl s_client -connect dynamodb.us-west-2.amazonaws.com:443 -tls1
CONNECTED(00000003)
depth=3 C = US, ST = Arizona, L = Scottsdale, O = &quot;Starfield Technologies, Inc.&quot;, CN = Starfield Services Root Certificate Authority - G2
verify error:num=20:unable to get local issuer certificate
...
중략
...
SSL-Session:
    Protocol  : TLSv1
    Cipher    : ECDHE-RSA-AES128-SHA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 06 Jul 2022 08:58:00 +0900</pubDate>
        <link>http://cwyang.github.io/2022/07/06/weak_tls_on_api_endpoint.html</link>
        <guid isPermaLink="true">http://cwyang.github.io/2022/07/06/weak_tls_on_api_endpoint.html</guid>
        
        <category>blog</category>
        
        <category>ssl</category>
        
        <category>tls</category>
        
        
      </item>
    
  </channel>
</rss>
